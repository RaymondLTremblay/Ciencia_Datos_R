[["transformacion.html", "Chapter 5 Transformacion 5.1 Evaluar el archivo 5.2 Temas: Reconocer y aplicar las diferentes funciones 5.3 Funciones 5.4 Agrupar por mutiples variables 5.5 Operaciones lógicas boolean: 5.6 Ejercicios 5.7 5.8 Datos importado de la web. 5.9 Ejercicio 5.10 5.11 Otras funciones: 5.12 starts_with(), ends_with(), contains() 5.13 rename() 5.14 Reoganizar el orden de las columnas, usando select() y everything() en la misma función 5.15 Crear un data frame más pequeño con las variables de interes 5.16 Crear nuevas variables 5.17 transmute() 5.18 lag() 5.19 Usa “Lag” con “IncCasosSaludNuevo” en COVID-19 PR 5.20 lead(), 5.21 cumsum 5.22 Día 6 5.23 cummean() and cumvar() 5.24 Uso de varianza cumulativa en investigación: 5.25 Que pasa con las funciones cummean, cumsum y cumvar si hay NA en el archivo de datos? 5.26 la función percent_rank() 5.27 la función percent_rank() sin NA 5.28 la función cume_dist() 5.29 Resúmenes con summarise() by group using group_by() 5.30 La aerolinea peor en atraso de salidas 5.31 El Pipe 5.32 Otras funciones: NA 5.33 Otras funciones:", " Chapter 5 Transformacion Fecha de la ultima revisión ## [1] &quot;2024-09-12&quot; El tema proviene de los siguientes sitios. English: https://r4ds.had.co.nz/transform.html Español: https://es.r4ds.hadley.nz/05-transform.html Code library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors Code library(datos) head(vuelos) ## # A tibble: 6 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.1 Evaluar el archivo Mirar el archivo y entender la información antes de hacer cualquier analisis/ Cual son las variables Cuales son. los tipos de datos int valores enteros, dbl números reales, significa dobles chr caracteres o vectores dttm fecha y tiempo, minutos date fecha S3: POSIXct Fecha y tiempo, minutos lgl valores logicos “cierto” (TRUE) y “falso” (FALSE) fctr factores categoricos. Evalua en este archivo los tipos de variables que se encuentra. Code vuelos ## # A tibble: 336,776 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # ℹ 336,766 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.1.1 Cual son todos los destinos de vuelos? cual función usará Code unique(vuelos$destino) ## [1] &quot;IAH&quot; &quot;MIA&quot; &quot;BQN&quot; &quot;ATL&quot; &quot;ORD&quot; &quot;FLL&quot; &quot;IAD&quot; &quot;MCO&quot; &quot;PBI&quot; &quot;TPA&quot; &quot;LAX&quot; &quot;SFO&quot; ## [13] &quot;DFW&quot; &quot;BOS&quot; &quot;LAS&quot; &quot;MSP&quot; &quot;DTW&quot; &quot;RSW&quot; &quot;SJU&quot; &quot;PHX&quot; &quot;BWI&quot; &quot;CLT&quot; &quot;BUF&quot; &quot;DEN&quot; ## [25] &quot;SNA&quot; &quot;MSY&quot; &quot;SLC&quot; &quot;XNA&quot; &quot;MKE&quot; &quot;SEA&quot; &quot;ROC&quot; &quot;SYR&quot; &quot;SRQ&quot; &quot;RDU&quot; &quot;CMH&quot; &quot;JAX&quot; ## [37] &quot;CHS&quot; &quot;MEM&quot; &quot;PIT&quot; &quot;SAN&quot; &quot;DCA&quot; &quot;CLE&quot; &quot;STL&quot; &quot;MYR&quot; &quot;JAC&quot; &quot;MDW&quot; &quot;HNL&quot; &quot;BNA&quot; ## [49] &quot;AUS&quot; &quot;BTV&quot; &quot;PHL&quot; &quot;STT&quot; &quot;EGE&quot; &quot;AVL&quot; &quot;PWM&quot; &quot;IND&quot; &quot;SAV&quot; &quot;CAK&quot; &quot;HOU&quot; &quot;LGB&quot; ## [61] &quot;DAY&quot; &quot;ALB&quot; &quot;BDL&quot; &quot;MHT&quot; &quot;MSN&quot; &quot;GSO&quot; &quot;CVG&quot; &quot;BUR&quot; &quot;RIC&quot; &quot;GSP&quot; &quot;GRR&quot; &quot;MCI&quot; ## [73] &quot;ORF&quot; &quot;SAT&quot; &quot;SDF&quot; &quot;PDX&quot; &quot;SJC&quot; &quot;OMA&quot; &quot;CRW&quot; &quot;OAK&quot; &quot;SMF&quot; &quot;TUL&quot; &quot;TYS&quot; &quot;OKC&quot; ## [85] &quot;PVD&quot; &quot;DSM&quot; &quot;PSE&quot; &quot;BHM&quot; &quot;CAE&quot; &quot;HDN&quot; &quot;BZN&quot; &quot;MTJ&quot; &quot;EYW&quot; &quot;PSP&quot; &quot;ACK&quot; &quot;BGR&quot; ## [97] &quot;ABQ&quot; &quot;ILM&quot; &quot;MVY&quot; &quot;SBN&quot; &quot;LEX&quot; &quot;CHO&quot; &quot;TVC&quot; &quot;ANC&quot; &quot;LGA&quot; 5.1.2 Seleciona los vuelos donde el destino es San Juan Code vuelos %&gt;% filter(destino==&quot;SJU&quot;) ## # A tibble: 5,819 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 615 615 0 ## 2 2013 1 1 628 630 -2 ## 3 2013 1 1 701 700 1 ## 4 2013 1 1 711 715 -4 ## 5 2013 1 1 820 820 0 ## 6 2013 1 1 820 820 0 ## 7 2013 1 1 840 845 -5 ## 8 2013 1 1 926 929 -3 ## 9 2013 1 1 1202 1159 3 ## 10 2013 1 1 1245 1249 -4 ## # ℹ 5,809 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.1.3 Selecciona los vuelos donde el destino es San Juan el dia de navidad Code vuelos %&gt;% filter(destino==&quot;SJU&quot;) %&gt;% filter(mes==12, dia==25) %&gt;% filter(aerolinea %in% c(&quot;AA&quot;, &quot;UA&quot;)) #pipe Command shift M ## # A tibble: 6 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 12 25 736 739 -3 ## 2 2013 12 25 759 805 -6 ## 3 2013 12 25 1202 1206 -4 ## 4 2013 12 25 1634 1630 4 ## 5 2013 12 25 1908 1900 8 ## 6 2013 12 25 2015 2017 -2 ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.1.4 Selecciona los vuelos que salen de San Juan en el dia de ti cumpleaños y contabiliza cuanto hubo Code df_dia_cumpl=vuelos %&gt;% filter(destino ==&quot;SJU&quot;) %&gt;% filter(mes== 8, dia== 1) |&gt; nrow() df_dia_cumpl ## [1] 19 5.1.4.1 Organizar los datos en orden de más grande a más pequeño Selecciona los mes, dia, destino, atraso_salida, atraso_llegada Selecciona solamente el mes de noviembre Selecciona solamente los vuelos a destino de a San Juan oraganiza los datos en orden de más atraso_salido de mayor a menor Code names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; Code vuelos %&gt;% dplyr::select(mes, dia, destino, atraso_salida, atraso_llegada) %&gt;% filter(mes==11) %&gt;% filter(destino ==&quot;SJU&quot;) %&gt;% arrange(desc(atraso_salida)) ## # A tibble: 429 × 5 ## mes dia destino atraso_salida atraso_llegada ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 11 7 SJU 231 190 ## 2 11 28 SJU 223 235 ## 3 11 23 SJU 187 154 ## 4 11 24 SJU 181 188 ## 5 11 23 SJU 157 165 ## 6 11 12 SJU 145 127 ## 7 11 10 SJU 94 88 ## 8 11 24 SJU 90 112 ## 9 11 30 SJU 68 59 ## 10 11 21 SJU 66 42 ## # ℹ 419 more rows 5.2 Temas: Reconocer y aplicar las diferentes funciones Tipos de variables: int dbl chr dttm lgl fctr date Funciones de dplyr: filter() arrange() select() summarize() group_by() Code library(datos) library(tidyverse) por_dia &lt;- vuelos %&gt;% # pipe group_by(dia) %&gt;% # group by day summarise(atraso_promedio = mean(atraso_salida, na.rm = TRUE)) por_dia ## # A tibble: 31 × 2 ## dia atraso_promedio ## &lt;int&gt; &lt;dbl&gt; ## 1 1 14.2 ## 2 2 14.1 ## 3 3 10.8 ## 4 4 5.79 ## 5 5 7.82 ## 6 6 6.99 ## 7 7 14.3 ## 8 8 21.8 ## 9 9 14.6 ## 10 10 18.3 ## # ℹ 21 more rows Code ## The median of the data set by day of the month por_dia_2 &lt;- vuelos %&gt;% group_by( dia) %&gt;% summarise(atraso_promedio = mean(atraso_salida, na.rm = TRUE), atraso_mediana = median(atraso_salida, na.rm=TRUE)) por_dia_2 ## # A tibble: 31 × 3 ## dia atraso_promedio atraso_mediana ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 14.2 -2 ## 2 2 14.1 -1 ## 3 3 10.8 -2 ## 4 4 5.79 -3 ## 5 5 7.82 -3 ## 6 6 6.99 -2 ## 7 7 14.3 -1 ## 8 8 21.8 -1 ## 9 9 14.6 -1 ## 10 10 18.3 -1 ## # ℹ 21 more rows 5.3 Funciones summarise = resumir conjuntos de datos mean, # promedio median, # mediana mode, # moda operaciones boolean Code # El valor más común en un conjunto de datos # Crear una función: no existe en los paquetes de R getmode &lt;- function(v) { uniqv &lt;- unique(v) uniqv[which.max(tabulate(match(v, uniqv)))] } por_dia_3=vuelos |&gt; dplyr::select(dia, mes, atraso_salida) |&gt; group_by(dia) %&gt;% summarise(atraso_promedio = mean(atraso_salida, na.rm = TRUE), atraso_max=max(atraso_salida, na.rm=TRUE), atraso_mode = getmode(atraso_salida)) por_dia_3 ## # A tibble: 31 × 4 ## dia atraso_promedio atraso_max atraso_mode ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 14.2 853 -5 ## 2 2 14.1 696 -4 ## 3 3 10.8 878 -4 ## 4 4 5.79 545 -5 ## 5 5 7.82 896 -5 ## 6 6 6.99 589 -4 ## 7 7 14.3 653 -5 ## 8 8 21.8 520 NA ## 9 9 14.6 1301 -4 ## 10 10 18.3 1126 -5 ## # ℹ 21 more rows ADD the mean, median and mode to the same data frame Code ## The mode of the value library(DescTools) ## Warning: package &#39;DescTools&#39; was built under R version 4.4.1 Code por_dia_4 &lt;- vuelos %&gt;% group_by(dia) %&gt;% summarise(atraso_promedio = mean(atraso_salida, na.rm = TRUE), atraso_median = median(atraso_salida, na.rm=TRUE), atraso_mode = getmode(atraso_salida)) por_dia_4 ## # A tibble: 31 × 4 ## dia atraso_promedio atraso_median atraso_mode ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 14.2 -2 -5 ## 2 2 14.1 -1 -4 ## 3 3 10.8 -2 -4 ## 4 4 5.79 -3 -5 ## 5 5 7.82 -3 -5 ## 6 6 6.99 -2 -4 ## 7 7 14.3 -1 -5 ## 8 8 21.8 -1 NA ## 9 9 14.6 -1 -4 ## 10 10 18.3 -1 -5 ## # ℹ 21 more rows 5.4 Agrupar por mutiples variables Aqui se agupa por dia y mes Code vuelos %&gt;% dplyr::select(anio, mes, dia, atraso_llegada, destino) %&gt;% filter(destino ==&quot;SJU&quot;) %&gt;% filter(mes == 12 &amp; dia ==25) %&gt;% # filter(mes == 12) %&gt;% group_by(dia, mes) %&gt;% summarise(atraso = mean(atraso_llegada, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;dia&#39;. You can override using the `.groups` ## argument. ## # A tibble: 1 × 3 ## # Groups: dia [1] ## dia mes atraso ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 25 12 3.57 5.5 Operaciones lógicas boolean: &amp; “ampersand” == “conjunción” “|” or= “o” !, no incluye, excluir…. %in%, filtrar para múltiples valores ==, es igual a… “exactamente” “&lt;” menor que “&gt;” mayor que “&lt;=” es menor o igual “&gt;=” es mayor o igual Bollean, que incluye múltiples opciones %in% Code vuelos %&gt;% dplyr::select(anio, mes, dia, atraso_salida) %&gt;% group_by(mes) %&gt;% filter(mes %in% c(1:6)) %&gt;% # mes entre 1 y 6 summarise(atraso = mean(atraso_salida, na.rm = TRUE)) ## # A tibble: 6 × 2 ## mes atraso ## &lt;int&gt; &lt;dbl&gt; ## 1 1 10.0 ## 2 2 10.8 ## 3 3 13.2 ## 4 4 13.9 ## 5 5 13.0 ## 6 6 20.8 5.5.1 Otra alternativa para filtrar 5.5.1.1 “|” Code vuelos %&gt;% dplyr::select(anio, mes, dia, atraso_salida) %&gt;% filter(mes == 1 | mes == 12) |&gt; # mes 1 o 12 summarise(atraso = mean(atraso_salida, na.rm = TRUE)) ## # A tibble: 1 × 1 ## atraso ## &lt;dbl&gt; ## 1 13.3 5.5.1.2 &amp; el “y” Code names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; Code vuelos %&gt;% dplyr::select(anio, mes, dia, atraso_salida, aerolinea) %&gt;% filter(mes == 12 &amp; dia == 25 &amp; aerolinea==&quot;AA&quot;) ## # A tibble: 78 × 5 ## anio mes dia atraso_salida aerolinea ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 2013 12 25 2 AA ## 2 2013 12 25 -4 AA ## 3 2013 12 25 1 AA ## 4 2013 12 25 0 AA ## 5 2013 12 25 -3 AA ## 6 2013 12 25 -2 AA ## 7 2013 12 25 26 AA ## 8 2013 12 25 -7 AA ## 9 2013 12 25 -6 AA ## 10 2013 12 25 21 AA ## # ℹ 68 more rows 5.6 Ejercicios Como se seleccionaría los meses de diciembre pero desde la del 25 o más 5.7 !, excluye algo, En este caso estamos excluyendo los días del 1 al 10 Code library(datos) library(tidyverse) vuelos %&gt;% dplyr::select(anio, mes, dia, atraso_salida, aerolinea) %&gt;% filter(mes == 11 &amp; !aerolinea %in% c(&quot;AA&quot;, &quot;DL&quot;)) %&gt;% group_by(aerolinea) %&gt;% summarise(atraso = mean(atraso_salida, na.rm = TRUE)) ## # A tibble: 14 × 2 ## aerolinea atraso ## &lt;chr&gt; &lt;dbl&gt; ## 1 9E 7.56 ## 2 AS 3.08 ## 3 B6 3.52 ## 4 EV 9.83 ## 5 F9 13.5 ## 6 FL 16.9 ## 7 HA -5.44 ## 8 MQ 3.28 ## 9 OO 0.8 ## 10 UA 6.37 ## 11 US 0.576 ## 12 VX 7.80 ## 13 WN 11.0 ## 14 YV 10.5 Ejercicios: Hacer los ejercicios en la sección 5.2.4 del libro en español 5.2.4 Ejercicios Encuentra todos los vuelos que: Tuvieron un retraso de llegada de dos o más horas Volaron a Houston (IAH o HOU) Cual son estos aeropuertos, Hou == Houston, IAH == George Bush, Texas Seleciona solamente los vuelos que fueron operados por United, American o Delta Selecciona solamente los vuelos que partieron en invierno del hemisferio sur (julio, agosto y septiembre) Selecciona solamente los vuelos que llegaron más de dos horas tarde, pero no salieron tarde Selecciona solamente los vuelos que se retrasaron por lo menos una hora, pero repusieron más de 30 minutos en vuelo Selecciona solamente los vuelos que partieron entre la medianoche y las 6a.m. (incluyente) Otra función de dplyr que es útil para usar filtros es between(). ¿Qué hace? ¿Puedes usarla para simplificar el código necesario para responder a los desafíos anteriores? Determinar cual “aerolinea” tiene más vuelos ## Comenzar Aquí ### ¿Qué pasa con los valores faltantes y resultados de analisis sin sentido? r library(tidyverse) 2^2 ## [1] 4 r 1^2 ## [1] 1 r 1^0 ## [1] 1 r NA^0 ## [1] 1 r #NA==1 NA|TRUE ## [1] TRUE r NA|FALSE ## [1] NA r FALSE &amp; NA ## [1] FALSE r TRUE &amp; NA ## [1] NA r FALSE * NA ## [1] NA r TRUE * NA ## [1] NA r NA * 0 ## [1] NA r NA * 1 ## [1] NA r 12 * 3 ## [1] 36 r NA - 3 ## [1] NA ## Contabilizar los NA - ¿Cuántos vuelos tienen datos faltantes en horario_salida? - ¿Qué otras variables tienen valores faltantes? - ¿Qué representan estas filas? ## Seleccionar solamente los vuelos donde el “horario de salida” es desconocido **** 5.8 Datos importado de la web. 5.8.1 Usar datos que provienen de una base de datos del web. Aquí un website que recopila la cantidad de personas vacunadas en los EEUU. Seleccionar solamente los datos de Puerto Rico 5.8.2 COVID world Otro website de datos de COVID, estos representa los datos de todos los paises del mundo Para encontrar datos de PR vea el siguiente enlace: Este sitio del gobierno de Puerto Rico almacen datos muchos diferentes tipos que estan relacionado a la isla. https://datos.estadisticas.pr/dataset?res_format=CSV Nota que para leer los datos de un archivo CSV, se usa la función “fread()” del paquete “data.table”. Cuando entre a la pagina, selecciona uno de los archivos, por ejemplo Facultad -Conservatorio de Musica Presione el boton “Explore” y selecciona “Preview” Arriba de la pagina vera el enlace de https://……… para poner en un script. Copie y pegue en el script. Code library(data.table) ## Warning: package &#39;data.table&#39; was built under R version 4.4.1 ## ## Attaching package: &#39;data.table&#39; ## The following object is masked from &#39;package:DescTools&#39;: ## ## %like% ## The following objects are masked from &#39;package:lubridate&#39;: ## ## hour, isoweek, mday, minute, month, quarter, second, wday, week, ## yday, year ## The following objects are masked from &#39;package:dplyr&#39;: ## ## between, first, last ## The following object is masked from &#39;package:purrr&#39;: ## ## transpose Code birth=fread(&quot;https://datos.estadisticas.pr/dataset/87620d17-bf63-445c-bb71-aca1a41c9077/resource/92728670-42cb-49d4-8fd3-cffdb6e54372/download/natlterr2014.csv&quot;) head(birth) ## dob_yy dob_mm dob_tt dob_wk bfacil f_facility bfacil3 mage_impflg ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 2014 1 NA 4 NA 0 1 NA ## 2: 2014 1 NA 4 NA 0 1 NA ## 3: 2014 1 NA 5 NA 0 1 NA ## 4: 2014 1 NA 5 NA 0 1 NA ## 5: 2014 1 NA 6 NA 0 1 NA ## 6: 2014 1 NA 6 NA 0 1 NA ## mage_repflg mager mager14 mager9 mbstate_rec restatus mrace31 mrace6 mrace15 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 1 37 11 6 2 2 NA NA NA ## 2: 1 31 10 5 3 2 NA NA NA ## 3: 1 25 9 4 2 2 NA NA NA ## 4: 1 20 8 3 2 2 NA NA NA ## 5: 1 22 8 3 2 2 NA NA NA ## 6: 1 43 12 7 2 2 NA NA NA ## mbrace mraceimp mhisp_r f_mhisp mracehisp mar_p dmar mar_imp f_mar_p meduc ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 4 NA 9 0 NA 2 NA 0 NA ## 2: 4 NA 9 0 NA 2 NA 0 NA ## 3: 4 NA 9 0 NA 1 NA 0 NA ## 4: 4 NA 9 0 NA 1 NA 0 NA ## 5: 4 NA 9 0 NA 2 NA 0 NA ## 6: 4 NA 9 0 NA 1 NA 0 NA ## f_meduc fagerpt_flg fagecomb fagerec11 frace31 frace6 frace15 fbrace fhisp_r ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 NA NA 11 NA NA NA 9 9 ## 2: 0 NA NA 11 NA NA NA 9 9 ## 3: 0 1 NA 6 NA NA NA 4 9 ## 4: 0 1 NA 3 NA NA NA 4 9 ## 5: 0 NA NA 11 NA NA NA 9 9 ## 6: 0 1 NA 7 NA NA NA 4 9 ## f_fhisp fracehisp feduc priorlive priordead priorterm lbo_rec tbo_rec illb_r ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 NA NA 2 0 0 3 3 NA ## 2: 0 NA NA 4 0 0 5 5 NA ## 3: 0 NA NA 2 0 2 3 5 NA ## 4: 0 NA NA 0 0 0 1 1 NA ## 5: 0 NA NA 1 0 0 2 2 NA ## 6: 0 NA NA 0 0 0 1 1 NA ## illb_r11 ilop_r ilop_r11 ilp_r ilp_r11 precare f_mpcb precare5 previs ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: NA NA NA NA NA NA 0 NA NA ## 2: NA NA NA NA NA NA 0 NA NA ## 3: NA NA NA NA NA NA 0 NA NA ## 4: NA NA NA NA NA NA 0 NA NA ## 5: NA NA NA NA NA NA 0 NA NA ## 6: NA NA NA NA NA NA 0 NA NA ## previs_rec f_tpcv wic f_wic cig_0 cig_1 cig_2 cig_3 cig0_r cig1_r cig2_r ## &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 12 0 0 NA NA NA NA NA NA NA ## 2: 12 0 0 NA NA NA NA NA NA NA ## 3: 12 0 0 NA NA NA NA NA NA NA ## 4: 12 0 0 NA NA NA NA NA NA NA ## 5: 12 0 0 NA NA NA NA NA NA NA ## 6: 12 0 0 NA NA NA NA NA NA NA ## cig3_r f_cigs_0 f_cigs_1 f_cigs_2 f_cigs_3 cig_rec f_tobaco m_ht_in f_m_ht ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: NA 0 0 0 0 0 NA 0 ## 2: NA 0 0 0 0 0 NA 0 ## 3: NA 0 0 0 0 0 NA 0 ## 4: NA 0 0 0 0 0 NA 0 ## 5: NA 0 0 0 0 0 NA 0 ## 6: NA 0 0 0 0 0 NA 0 ## bmi bmi_r pwgt_r f_pwgt dwgt_r f_dwgt wtgain wtgain_rec f_wtgain rf_pdiab ## &lt;num&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; ## 1: NA NA NA 0 NA 0 99 9 0 ## 2: NA NA NA 0 NA 0 99 9 0 ## 3: NA NA NA 0 NA 0 99 9 0 ## 4: NA NA NA 0 NA 0 99 9 0 ## 5: NA NA NA 0 NA 0 99 9 0 ## 6: NA NA NA 0 NA 0 99 9 0 ## rf_gdiab rf_phype rf_ghype rf_ehype rf_ppterm f_rf_pdiab f_rf_gdiab ## &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 0 ## 2: 0 0 ## 3: 0 0 ## 4: 0 0 ## 5: 0 0 ## 6: 0 0 ## f_rf_phyper f_rf_ghyper f_rf_eclamp f_rf_ppb rf_inftr rf_fedrg rf_artec ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; ## 1: 0 0 0 0 ## 2: 0 0 0 0 ## 3: 0 0 0 0 ## 4: 0 0 0 0 ## 5: 0 0 0 0 ## 6: 0 0 0 0 ## f_rf_inft f_rf_inf_drg f_rf_inf_art rf_cesar rf_cesarn f_rf_cesar ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 0 0 NA 0 ## 2: 0 0 0 NA 0 ## 3: 0 0 0 NA 0 ## 4: 0 0 0 NA 0 ## 5: 0 0 0 NA 0 ## 6: 0 0 0 NA 0 ## f_rf_ncesar no_risks ip_gon ip_syph ip_chlam ip_hepatb ip_hepatc f_ip_gonor ## &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;int&gt; ## 1: 0 NA 0 ## 2: 0 NA 0 ## 3: 0 NA 0 ## 4: 0 NA 0 ## 5: 0 NA 0 ## 6: 0 NA 0 ## f_ip_syph f_ip_chlam f_ip_hepatb f_ip_hepatc no_infec ob_ecvs ob_ecvf ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;char&gt; ## 1: 0 0 0 0 NA ## 2: 0 0 0 0 NA ## 3: 0 0 0 0 NA ## 4: 0 0 0 0 NA ## 5: 0 0 0 0 NA ## 6: 0 0 0 0 NA ## f_ob_succ f_ob_fail ld_indl ld_augm ld_ster ld_antb ld_chor ld_anes ## &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; ## 1: 0 0 ## 2: 0 0 ## 3: 0 0 ## 4: 0 0 ## 5: 0 0 ## 6: 0 0 ## f_ld_indl f_ld_augm f_ld_ster f_ld_antb f_ld_chor f_ld_anes no_lbrdlv ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 0 0 0 0 0 NA ## 2: 0 0 0 0 0 0 NA ## 3: 0 0 0 0 0 0 NA ## 4: 0 0 0 0 0 0 NA ## 5: 0 0 0 0 0 0 NA ## 6: 0 0 0 0 0 0 NA ## me_pres me_rout me_trial f_me_pres f_me_rout f_me_trial rdmeth_rec dmeth_rec ## &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: NA NA 0 0 0 NA 9 ## 2: NA NA 0 0 0 NA 9 ## 3: NA NA 0 0 0 NA 9 ## 4: NA NA 0 0 0 NA 9 ## 5: NA NA 0 0 0 NA 9 ## 6: NA NA 0 0 0 NA 9 ## f_dmeth_rec mm_mtr mm_plac mm_rupt mm_uhyst mm_aicu f_mm_mtr f_mm_ f_mm_rupt ## &lt;int&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 0 0 0 ## 2: 0 0 0 0 ## 3: 0 0 0 0 ## 4: 0 0 0 0 ## 5: 0 0 0 0 ## 6: 0 0 0 0 ## f_mm_uhyst f_mm_aicu no_mmorb attend mtran pay pay_rec f_pay f_pay_rec ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 0 NA 1 NA NA 0 0 ## 2: 0 0 NA 1 NA NA 0 0 ## 3: 0 0 NA 1 NA NA 0 0 ## 4: 0 0 NA 1 NA NA 0 0 ## 5: 0 0 NA 1 NA NA 0 0 ## 6: 0 0 NA 1 NA NA 0 0 ## apgar5 apgar5r f_apgar5 apgar10 apgar10r dplural imp_plur setorder_r sex ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; ## 1: 99 5 0 NA NA 1 NA NA M ## 2: 99 5 0 NA NA 1 NA NA M ## 3: 99 5 0 NA NA 1 NA NA M ## 4: 99 5 0 NA NA 1 NA NA F ## 5: 99 5 0 NA NA 1 NA NA F ## 6: 99 5 0 NA NA 1 NA NA F ## imp_sex dlmp_mm dlmp_yy compgst_imp obgest_flg combgest gestrec10 gestrec3 ## &lt;lgcl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: NA 99 9999 NA 1 99 99 3 ## 2: NA 99 9999 NA 1 99 99 3 ## 3: NA 99 9999 NA 1 99 99 3 ## 4: NA 99 9999 NA 1 99 99 3 ## 5: NA 99 9999 NA 1 99 99 3 ## 6: NA 99 9999 NA 1 99 99 3 ## lmpused oegest_comb oegest_r10 oegest_r3 dbwt bwtr12 bwtr4 ab_aven1 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; ## 1: NA 99 10 3 4139 9 3 ## 2: NA 99 10 3 3742 8 3 ## 3: NA 99 10 3 3628 8 3 ## 4: NA 99 10 3 2466 5 2 ## 5: NA 99 10 3 4564 10 3 ## 6: NA 99 10 3 2637 6 3 ## ab_aven6 ab_nicu ab_surf ab_anti ab_seiz f_ab_vent f_ab_vent6 f_ab_nicu ## &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 0 0 ## 2: 0 0 0 ## 3: 0 0 0 ## 4: 0 0 0 ## 5: 0 0 0 ## 6: 0 0 0 ## f_ab_surfac f_ab_antibio f_ab_seiz no_abnorm ca_anen ca_mnsb ca_cchd ca_cdh ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; ## 1: 0 0 0 NA ## 2: 0 0 0 NA ## 3: 0 0 0 NA ## 4: 0 0 0 NA ## 5: 0 0 0 NA ## 6: 0 0 0 NA ## ca_omph ca_gast f_ca_anen f_ca_menin f_ca_heart f_ca_hernia f_ca_ompha ## &lt;char&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 0 0 0 0 ## 2: 0 0 0 0 0 ## 3: 0 0 0 0 0 ## 4: 0 0 0 0 0 ## 5: 0 0 0 0 0 ## 6: 0 0 0 0 0 ## f_ca_gastro ca_limb ca_cleft ca_clpal ca_downs ca_disor ca_hypo f_ca_limb ## &lt;int&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;char&gt; &lt;int&gt; ## 1: 0 0 ## 2: 0 0 ## 3: 0 0 ## 4: 0 0 ## 5: 0 0 ## 6: 0 0 ## f_ca_cleftlp f_ca_cleft f_ca_downs f_ca_chrom f_ca_hypos no_congen itran ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; ## 1: 0 0 0 0 0 NA ## 2: 0 0 0 0 0 NA ## 3: 0 0 0 0 0 NA ## 4: 0 0 0 0 0 NA ## 5: 0 0 0 0 0 NA ## 6: 0 0 0 0 0 NA ## ilive bfed f_bfed ubfacil urf_diab urf_chyper urf_phyper urf_eclam ## &lt;char&gt; &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 0 1 9 9 9 9 ## 2: 0 1 9 9 9 9 ## 3: 0 1 9 9 9 9 ## 4: 0 1 9 9 9 9 ## 5: 0 1 9 9 9 9 ## 6: 0 1 9 9 9 9 ## ume_forcep ume_vac uop_induc uld_breech uca_anen uca_spina uca_ompha ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 9 9 9 9 9 9 9 ## 2: 9 9 9 9 9 9 9 ## 3: 9 9 9 9 9 9 9 ## 4: 9 9 9 9 9 9 9 ## 5: 9 9 9 9 9 9 9 ## 6: 9 9 9 9 9 9 9 ## uca_cleftlp uca_hernia uca_downs ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1: 9 9 9 ## 2: 9 9 9 ## 3: 9 9 9 ## 4: 9 9 9 ## 5: 9 9 9 ## 6: 9 9 9 Otra alternativa es bajar los datos en formato .csv o Excel y subirlo a su proyecto en RStudio. Code library(readr) nchs_births_2001 &lt;- read_csv(&quot;nchs_births_2001.csv&quot;) ## Warning: One or more parsing issues, call `problems()` on your data frame for details, ## e.g.: ## dat &lt;- vroom(...) ## problems(dat) ## Rows: 55983 Columns: 214 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (39): CNTYNAT, CNTOCFIP, CNTYRES, CITYRES, CITRSPOP, METRORES, STRESFIP... ## dbl (158): DATAYEAR, RECTYPE, RESTATUS, RECWT, PLDEL, PLDEL3, BIRATTND, REGN... ## lgl (17): R1A, MAGERFLG, DMARIMP, R8, BWIMP, Imputed_birthweight, R2, FRACE... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Code head(nchs_births_2001) ## # A tibble: 6 × 214 ## DATAYEAR RECTYPE RESTATUS RECWT PLDEL PLDEL3 BIRATTND REGNOCC DIVOCC STSUBOCC ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2001 1 1 1 1 1 1 0 0 0 ## 2 2001 1 1 1 1 1 1 0 0 0 ## 3 2001 2 2 1 1 1 1 0 0 0 ## 4 2001 2 2 1 1 1 1 0 0 0 ## 5 2001 2 2 1 1 1 1 0 0 0 ## 6 2001 1 1 1 1 1 1 0 0 0 ## # ℹ 204 more variables: STNATEXP &lt;dbl&gt;, STATENAT &lt;dbl&gt;, CNTYNAT &lt;chr&gt;, ## # STOCCFIP &lt;dbl&gt;, CNTOCFIP &lt;chr&gt;, CNTOCPOP &lt;dbl&gt;, REGNRES &lt;dbl&gt;, ## # DIVRES &lt;dbl&gt;, STSUBRES &lt;dbl&gt;, STRESEXP &lt;dbl&gt;, STATERES &lt;dbl&gt;, ## # CNTYRES &lt;chr&gt;, CITYRES &lt;chr&gt;, CITRSPOP &lt;chr&gt;, METRORES &lt;chr&gt;, ## # STRESFIP &lt;chr&gt;, CNTYRFIP &lt;chr&gt;, PLACEFIP &lt;chr&gt;, CMSA &lt;chr&gt;, SMSARFIP &lt;chr&gt;, ## # CNTRSPOP &lt;chr&gt;, R1A &lt;lgl&gt;, MAGERFLG &lt;lgl&gt;, MAGEIMP &lt;dbl&gt;, DMAGE &lt;dbl&gt;, ## # MAGE36 &lt;chr&gt;, MAGE12 &lt;chr&gt;, MAGE8 &lt;dbl&gt;, ORMOTH &lt;dbl&gt;, ORRACEM &lt;dbl&gt;, … 5.9 Ejercicio Selecciona solamente los datos de los bebes que nacieron primer mes del año, pero agrupado por el día de la semana y contabilizado Code nchs_births_2001 |&gt; dplyr::select(BIRMON, CSEX) |&gt; group_by() ## # A tibble: 55,983 × 2 ## BIRMON CSEX ## &lt;chr&gt; &lt;dbl&gt; ## 1 01 1 ## 2 01 1 ## 3 01 2 ## 4 01 2 ## 5 01 2 ## 6 01 1 ## 7 01 2 ## 8 01 2 ## 9 01 2 ## 10 01 2 ## # ℹ 55,973 more rows Code unique(nchs_births_2001$STATENAT) ## [1] 52 Code unique(nchs_births_2001$NOCCUR) ## Warning: Unknown or uninitialised column: `NOCCUR`. ## NULL Code unique(nchs_births_2001$RB) ## [1] NA Code #WEEKDAY #DGESTAT COVID_PR Calcula la cantidad de muertes por dia en PR, y el maximo de muerto en un día por COVID 5.9.1 La función arrange() arrange() Code vuelos %&gt;% dplyr::select(horario_salida) %&gt;% arrange() |&gt; head(n=10) ## # A tibble: 10 × 1 ## horario_salida ## &lt;int&gt; ## 1 517 ## 2 533 ## 3 542 ## 4 544 ## 5 554 ## 6 554 ## 7 555 ## 8 557 ## 9 557 ## 10 558 Code vuelos %&gt;% arrange(desc(horario_salida)) |&gt; head(n=10) ## # A tibble: 10 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 10 30 2400 2359 1 ## 2 2013 11 27 2400 2359 1 ## 3 2013 12 5 2400 2359 1 ## 4 2013 12 9 2400 2359 1 ## 5 2013 12 9 2400 2250 70 ## 6 2013 12 13 2400 2359 1 ## 7 2013 12 19 2400 2359 1 ## 8 2013 12 29 2400 1700 420 ## 9 2013 2 7 2400 2359 1 ## 10 2013 2 7 2400 2359 1 ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.3.1 Ejercicios Ordena vuelos para encontrar los vuelos más retrasados en salida. Encuentra los vuelos que salieron más temprano. Ordena vuelos para encontrar los vuelos más rápidos (que viajaron a mayor velocidad). ¿Cuáles vuelos viajaron más lejos? ¿Cuál viajó más cerca? Otra función desc() 5.10 Ejercicios: Hacer los ejercicios en la sección 5.3.1 del libro en español 5.11 Otras funciones: - starts_with() - ends_with() - rename() - contains() - everything() 5.12 starts_with(), ends_with(), contains() Es una función para seleccionar basado en una caracteristicas del nombre de la columna Code names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; Code vuelos %&gt;% dplyr::select(horario_salida) ## # A tibble: 336,776 × 1 ## horario_salida ## &lt;int&gt; ## 1 517 ## 2 533 ## 3 542 ## 4 544 ## 5 554 ## 6 554 ## 7 555 ## 8 557 ## 9 557 ## 10 558 ## # ℹ 336,766 more rows Code vuelos %&gt;% dplyr::select(starts_with(&quot;horario&quot;)) ## # A tibble: 336,776 × 2 ## horario_salida horario_llegada ## &lt;int&gt; &lt;int&gt; ## 1 517 830 ## 2 533 850 ## 3 542 923 ## 4 544 1004 ## 5 554 812 ## 6 554 740 ## 7 555 913 ## 8 557 709 ## 9 557 838 ## 10 558 753 ## # ℹ 336,766 more rows Code vuelos %&gt;% dplyr::select(ends_with(&quot;salida&quot;)) ## # A tibble: 336,776 × 2 ## horario_salida atraso_salida ## &lt;int&gt; &lt;dbl&gt; ## 1 517 2 ## 2 533 4 ## 3 542 2 ## 4 544 -1 ## 5 554 -6 ## 6 554 -4 ## 7 555 -5 ## 8 557 -3 ## 9 557 -3 ## 10 558 -2 ## # ℹ 336,766 more rows Code vuelos %&gt;% dplyr::select(contains(&quot;hora&quot;)) ## # A tibble: 336,776 × 4 ## horario_salida horario_llegada hora fecha_hora ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dttm&gt; ## 1 517 830 5 2013-01-01 05:00:00 ## 2 533 850 5 2013-01-01 05:00:00 ## 3 542 923 5 2013-01-01 05:00:00 ## 4 544 1004 5 2013-01-01 05:00:00 ## 5 554 812 6 2013-01-01 06:00:00 ## 6 554 740 5 2013-01-01 05:00:00 ## 7 555 913 6 2013-01-01 06:00:00 ## 8 557 709 6 2013-01-01 06:00:00 ## 9 557 838 6 2013-01-01 06:00:00 ## 10 558 753 6 2013-01-01 06:00:00 ## # ℹ 336,766 more rows 5.13 rename() Cambiar el nombre de la columna Code vuelos %&gt;% rename(aeropuerto_origen=origen) %&gt;% rename(areopuerto_distino=destino) # nombre nuevo= nombre original ## # A tibble: 336,776 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # ℹ 336,766 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # aeropuerto_origen &lt;chr&gt;, areopuerto_distino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, ## # distancia &lt;dbl&gt;, hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.14 Reoganizar el orden de las columnas, usando select() y everything() en la misma función Code head(vuelos) ## # A tibble: 6 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; Code vuelos %&gt;% dplyr::select(distancia, aerolinea, everything()) ## # A tibble: 336,776 × 19 ## distancia aerolinea anio mes dia horario_salida salida_programada ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1400 UA 2013 1 1 517 515 ## 2 1416 UA 2013 1 1 533 529 ## 3 1089 AA 2013 1 1 542 540 ## 4 1576 B6 2013 1 1 544 545 ## 5 762 DL 2013 1 1 554 600 ## 6 719 UA 2013 1 1 554 558 ## 7 1065 B6 2013 1 1 555 600 ## 8 229 EV 2013 1 1 557 600 ## 9 944 B6 2013 1 1 557 600 ## 10 733 AA 2013 1 1 558 600 ## # ℹ 336,766 more rows ## # ℹ 12 more variables: atraso_salida &lt;dbl&gt;, horario_llegada &lt;int&gt;, ## # llegada_programada &lt;int&gt;, atraso_llegada &lt;dbl&gt;, vuelo &lt;int&gt;, ## # codigo_cola &lt;chr&gt;, origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; Seleccionar de un conjunto de variables en orden que aparece en el data.frame Code vuelos |&gt; dplyr::select(anio:horario_salida) ## # A tibble: 336,776 × 4 ## anio mes dia horario_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 ## 2 2013 1 1 533 ## 3 2013 1 1 542 ## 4 2013 1 1 544 ## 5 2013 1 1 554 ## 6 2013 1 1 554 ## 7 2013 1 1 555 ## 8 2013 1 1 557 ## 9 2013 1 1 557 ## 10 2013 1 1 558 ## # ℹ 336,766 more rows Ejercicios: Hacer los ejercicios en la sección 5.4.1 del libro en español Otras funciones: mutate() Code names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; Code vuelos |&gt; dplyr::select(distancia, tiempo_vuelo, atraso_salida, atraso_llegada) |&gt; mutate( ganancia = atraso_salida - atraso_llegada, velocidad = distancia / tiempo_vuelo * 60) ## # A tibble: 336,776 × 6 ## distancia tiempo_vuelo atraso_salida atraso_llegada ganancia velocidad ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1400 227 2 11 -9 370. ## 2 1416 227 4 20 -16 374. ## 3 1089 160 2 33 -31 408. ## 4 1576 183 -1 -18 17 517. ## 5 762 116 -6 -25 19 394. ## 6 719 150 -4 12 -16 288. ## 7 1065 158 -5 19 -24 404. ## 8 229 53 -3 -14 11 259. ## 9 944 140 -3 -8 5 405. ## 10 733 138 -2 8 -10 319. ## # ℹ 336,766 more rows 5.15 Crear un data frame más pequeño con las variables de interes Code library(tidyverse) library(nycflights13) head(flights) ## # A tibble: 6 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## # ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, ## # hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Code names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; Code vuelos_sml &lt;- dplyr::select(vuelos, anio:dia, starts_with(&quot;atraso&quot;), distancia, tiempo_vuelo ) head(vuelos_sml) ## # A tibble: 6 × 7 ## anio mes dia atraso_salida atraso_llegada distancia tiempo_vuelo ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 1400 227 ## 2 2013 1 1 4 20 1416 227 ## 3 2013 1 1 2 33 1089 160 ## 4 2013 1 1 -1 -18 1576 183 ## 5 2013 1 1 -6 -25 762 116 ## 6 2013 1 1 -4 12 719 150 5.16 Crear nuevas variables Code mutate(vuelos_sml, ganado = atraso_salida - atraso_llegada, velocidad = distancia / tiempo_vuelo * 60 ) ## # A tibble: 336,776 × 9 ## anio mes dia atraso_salida atraso_llegada distancia tiempo_vuelo ganado ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 1400 227 -9 ## 2 2013 1 1 4 20 1416 227 -16 ## 3 2013 1 1 2 33 1089 160 -31 ## 4 2013 1 1 -1 -18 1576 183 17 ## 5 2013 1 1 -6 -25 762 116 19 ## 6 2013 1 1 -4 12 719 150 -16 ## 7 2013 1 1 -5 19 1065 158 -24 ## 8 2013 1 1 -3 -14 229 53 11 ## 9 2013 1 1 -3 -8 944 140 5 ## 10 2013 1 1 -2 8 733 138 -10 ## # ℹ 336,766 more rows ## # ℹ 1 more variable: velocidad &lt;dbl&gt; 5.17 transmute() Para guardar solamente la nueva variable usa transmutate Code flights |&gt; transmute( gain = dep_delay - arr_delay, hours = air_time / 60, gain_per_hour = gain / hours ) ## # A tibble: 336,776 × 3 ## gain hours gain_per_hour ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -9 3.78 -2.38 ## 2 -16 3.78 -4.23 ## 3 -31 2.67 -11.6 ## 4 17 3.05 5.57 ## 5 19 1.93 9.83 ## 6 -16 2.5 -6.4 ## 7 -24 2.63 -9.11 ## 8 11 0.883 12.5 ## 9 5 2.33 2.14 ## 10 -10 2.3 -4.35 ## # ℹ 336,766 more rows 5.18 lag() Para calcular diferencias entre variables en la misma columna Code set.seed(12345) # que los datos sean al azar, siempre sean los mismo, se usa el &quot;set.seed()&quot; para enseñanza. #rnorm() DATOS CON DISTRIBUCION NORMAL data=rpois(14, 10) df=as_tibble(data) df ## # A tibble: 14 × 1 ## value ## &lt;int&gt; ## 1 11 ## 2 12 ## 3 9 ## 4 8 ## 5 11 ## 6 4 ## 7 11 ## 8 7 ## 9 8 ## 10 11 ## 11 9 ## 12 10 ## 13 9 ## 14 11 Code df %&gt;% dplyr::select(value) %&gt;% mutate(lag1=lag(value)) %&gt;% mutate(lag3=lag(value, 3)) %&gt;% mutate(lag7=lag(value,5)) ## # A tibble: 14 × 4 ## value lag1 lag3 lag7 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 11 NA NA NA ## 2 12 11 NA NA ## 3 9 12 NA NA ## 4 8 9 11 NA ## 5 11 8 12 NA ## 6 4 11 9 11 ## 7 11 4 8 12 ## 8 7 11 11 9 ## 9 8 7 4 8 ## 10 11 8 11 11 ## 11 9 11 7 4 ## 12 10 9 8 11 ## 13 9 10 11 7 ## 14 11 9 9 8 Code ## Calcular la diferencia usando lag df%&gt;% dplyr::select(value) %&gt;% mutate(Changes=value-lag(value, 1)) # El cambio en los valores entre celdas ## # A tibble: 14 × 2 ## value Changes ## &lt;int&gt; &lt;int&gt; ## 1 11 NA ## 2 12 1 ## 3 9 -3 ## 4 8 -1 ## 5 11 3 ## 6 4 -7 ## 7 11 7 ## 8 7 -4 ## 9 8 1 ## 10 11 3 ## 11 9 -2 ## 12 10 1 ## 13 9 -1 ## 14 11 2 5.19 Usa “Lag” con “IncCasosSaludNuevo” en COVID-19 PR Evalua la diferencia en números de casos entre 7 días de las semana en números de casos nuevos de COVID, “IncCasosSaludNuevo” Code library(readr) library(dplyr) #names(url_COVID_PR) url_COVID_PR &lt;- read_csv(&quot;Datos/url_COVID_PR.csv&quot;) ## New names: ## Rows: 587 Columns: 18 ## ── Column specification ## ──────────────────────────────────────────────────────── Delimiter: &quot;,&quot; chr ## (1): Fecha dbl (17): ...1, Muertes, IncrementoMuertes, CasosPCR_Salud, ## IncCasosPCR_Salu... ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -&gt; `...1` Code #head(url_COVID_PR) #names(url_COVID_PR) df2=url_COVID_PR %&gt;% dplyr::select(IncCasosSaludNuevo) %&gt;% mutate(Cambios_Casos=IncCasosSaludNuevo-lag(IncCasosSaludNuevo,5)) df2 ## # A tibble: 587 × 2 ## IncCasosSaludNuevo Cambios_Casos ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2 NA ## 2 3 NA ## 3 3 NA ## 4 0 NA ## 5 9 NA ## 6 7 5 ## 7 6 3 ## 8 5 2 ## 9 14 14 ## 10 12 3 ## # ℹ 577 more rows Code df2 %&gt;% dplyr::select(IncCasosSaludNuevo, Cambios_Casos) %&gt;% colMeans(na.rm=TRUE) ## IncCasosSaludNuevo Cambios_Casos ## 257.8310580 0.2254733 Code #df2 %&gt;% # select() # slice(na.rm=TRUE) # lets you index rows by their (integer) locations. It allows you to select, remove, and duplicate rows. It is accompanied by a number of helpers for common use cases 5.20 lead(), is the “next” (lead()) values in a vector/column Code set.seed(12345) data=rpois(15, 10) df=as.tibble(data) ## Warning: `as.tibble()` was deprecated in tibble 2.0.0. ## ℹ Please use `as_tibble()` instead. ## ℹ The signature and semantics have changed, see `?as_tibble`. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. Code df ## # A tibble: 15 × 1 ## value ## &lt;int&gt; ## 1 11 ## 2 12 ## 3 9 ## 4 8 ## 5 11 ## 6 4 ## 7 11 ## 8 7 ## 9 8 ## 10 11 ## 11 9 ## 12 10 ## 13 9 ## 14 11 ## 15 13 Code df %&gt;% dplyr::select(value) %&gt;% mutate(lead1=lead(value)) %&gt;% mutate(lead3=lead(value, 3)) ## # A tibble: 15 × 3 ## value lead1 lead3 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 11 12 8 ## 2 12 9 11 ## 3 9 8 4 ## 4 8 11 11 ## 5 11 4 7 ## 6 4 11 8 ## 7 11 7 11 ## 8 7 8 9 ## 9 8 11 10 ## 10 11 9 9 ## 11 9 10 11 ## 12 10 9 13 ## 13 9 11 NA ## 14 11 13 NA ## 15 13 NA NA Code # Calculate the change in value from one (1) time period and four (4) time periods df%&gt;% dplyr::select(value) %&gt;% mutate(lead1=value-lead(value)) %&gt;% mutate(lead7=value-lead(value, 7)) ## # A tibble: 15 × 3 ## value lead1 lead7 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 11 -1 4 ## 2 12 3 4 ## 3 9 1 -2 ## 4 8 -3 -1 ## 5 11 7 1 ## 6 4 -7 -5 ## 7 11 4 0 ## 8 7 -1 -6 ## 9 8 -3 NA ## 10 11 2 NA ## 11 9 -1 NA ## 12 10 1 NA ## 13 9 -2 NA ## 14 11 -2 NA ## 15 13 NA NA 5.21 cumsum Cumulative Sum: the values are sum along the vector or column Code x &lt;- sample(1:15, 10, replace=TRUE) x ## [1] 14 2 4 11 12 9 9 4 8 11 Code df=as.tibble(x) df ## # A tibble: 10 × 1 ## value ## &lt;int&gt; ## 1 14 ## 2 2 ## 3 4 ## 4 11 ## 5 12 ## 6 9 ## 7 9 ## 8 4 ## 9 8 ## 10 11 Code df %&gt;% dplyr::select(value) %&gt;% mutate(suma=cumsum(value)) ## # A tibble: 10 × 2 ## value suma ## &lt;int&gt; &lt;int&gt; ## 1 14 14 ## 2 2 16 ## 3 4 20 ## 4 11 31 ## 5 12 43 ## 6 9 52 ## 7 9 61 ## 8 4 65 ## 9 8 73 ## 10 11 84 Code url_COVID_PR &lt;- read_csv(&quot;Datos/url_COVID_PR.csv&quot;) ## New names: ## Rows: 587 Columns: 18 ## ── Column specification ## ──────────────────────────────────────────────────────── Delimiter: &quot;,&quot; chr ## (1): Fecha dbl (17): ...1, Muertes, IncrementoMuertes, CasosPCR_Salud, ## IncCasosPCR_Salu... ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -&gt; `...1` Code head(url_COVID_PR) ## # A tibble: 6 × 18 ## ...1 Fecha Muertes IncrementoMuertes CasosPCR_Salud IncCasosPCR_Salud ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 3/12/20 0 0 NA NA ## 2 2 3/13/20 0 0 NA NA ## 3 3 3/14/20 0 0 NA NA ## 4 4 3/15/20 0 0 NA NA ## 5 5 3/16/20 0 0 NA NA ## 6 6 3/17/20 0 0 NA NA ## # ℹ 12 more variables: CasosSaludNuevo &lt;dbl&gt;, IncCasosSaludNuevo &lt;dbl&gt;, ## # HospitCOV19 &lt;dbl&gt;, CamasICU &lt;dbl&gt;, CamasICU_disp &lt;dbl&gt;, Ventiladores &lt;dbl&gt;, ## # MuertesSalud &lt;dbl&gt;, IncMueSalud &lt;dbl&gt;, VacDoses &lt;dbl&gt;, VacAdm &lt;dbl&gt;, ## # N1MoreDoses &lt;dbl&gt;, N2Doses &lt;dbl&gt; Code url_COVID_PR %&gt;% dplyr::select(IncCasosSaludNuevo, CasosSaludNuevo) %&gt;% mutate(suma=cumsum(IncCasosSaludNuevo)) ## # A tibble: 587 × 3 ## IncCasosSaludNuevo CasosSaludNuevo suma ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2 2 2 ## 2 3 5 5 ## 3 3 8 8 ## 4 0 8 8 ## 5 9 17 17 ## 6 7 24 24 ## 7 6 30 30 ## 8 5 35 35 ## 9 14 49 49 ## 10 12 61 61 ## # ℹ 577 more rows 5.22 Día 6 5.23 cummean() and cumvar() The mean of the values are calculated Cummulative mean Code set.seed(678) x &lt;- rnorm(1000, 5, .001) head(x) ## [1] 4.999227 5.000933 5.000466 4.998915 4.997844 4.999281 Code df=as.tibble(x) head(df) ## # A tibble: 6 × 1 ## value ## &lt;dbl&gt; ## 1 5.00 ## 2 5.00 ## 3 5.00 ## 4 5.00 ## 5 5.00 ## 6 5.00 Code mean(df$value) ## [1] 4.999966 Code library(MASS) ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select Code df3=df %&gt;% dplyr::select(value) %&gt;% mutate(Prom_cum=cummean(value)) %&gt;% mutate(Var_cum=cumstats::cumvar(value)) # activa el paquete cumstats library(cumstats) ## ## Attaching package: &#39;cumstats&#39; ## The following object is masked from &#39;package:DescTools&#39;: ## ## Mode ## The following object is masked from &#39;package:dplyr&#39;: ## ## cummean Code df3=df %&gt;% dplyr::select(value) %&gt;% mutate(Prom_cum=cummean(value)) %&gt;% mutate(Var_cum=cumvar(value)) df3 ## # A tibble: 1,000 × 3 ## value Prom_cum Var_cum ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.00 5.00 NA ## 2 5.00 5.00 0.00000146 ## 3 5.00 5.00 0.000000778 ## 4 5.00 5.00 0.000000937 ## 5 5.00 5.00 0.00000154 ## 6 5.00 5.00 0.00000124 ## 7 5.00 5.00 0.00000139 ## 8 5.00 5.00 0.00000129 ## 9 5.00 5.00 0.00000115 ## 10 5.00 5.00 0.00000113 ## # ℹ 990 more rows 5.24 Uso de varianza cumulativa en investigación: Un metodo para determinar si la cantidad de muestras recolectada es suficiente, es evaluar si la varianza cumulativa sigue cambiando cuando se añade nuevas recolección de datos. Code df3$order=c(1:1000) df3 ## # A tibble: 1,000 × 4 ## value Prom_cum Var_cum order ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 5.00 5.00 NA 1 ## 2 5.00 5.00 0.00000146 2 ## 3 5.00 5.00 0.000000778 3 ## 4 5.00 5.00 0.000000937 4 ## 5 5.00 5.00 0.00000154 5 ## 6 5.00 5.00 0.00000124 6 ## 7 5.00 5.00 0.00000139 7 ## 8 5.00 5.00 0.00000129 8 ## 9 5.00 5.00 0.00000115 9 ## 10 5.00 5.00 0.00000113 10 ## # ℹ 990 more rows Code ggplot(df3, aes(order, Var_cum))+ geom_point()+ geom_smooth() ## `geom_smooth()` using method = &#39;gam&#39; and formula = &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## Warning: Removed 1 row containing non-finite outside the scale range ## (`stat_smooth()`). ## Warning: Removed 1 row containing missing values or values outside the scale range ## (`geom_point()`). 5.25 Que pasa con las funciones cummean, cumsum y cumvar si hay NA en el archivo de datos? 5.25.1 Replacar los NA con 0, usando la función replace_na() con un valor especifico replace_na(“variable”, 0) Code datos_NA=c(1:8, NA, 10:20) datos_NA=as_data_frame(datos_NA) ## Warning: `as_data_frame()` was deprecated in tibble 2.0.0. ## ℹ Please use `as_tibble()` (with slightly different semantics) to convert to a ## tibble, or `as.data.frame()` to convert to a data frame. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. Code datos_NA %&gt;% dplyr::select(value) %&gt;% mutate(Prom_cum=cummean(value)) %&gt;% mutate(Var_cum=cumstats::cumvar(value)) ## # A tibble: 20 × 3 ## value Prom_cum Var_cum ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 NA ## 2 2 1.5 0.5 ## 3 3 2 1 ## 4 4 2.5 1.67 ## 5 5 3 2.5 ## 6 6 3.5 3.5 ## 7 7 4 4.67 ## 8 8 4.5 6 ## 9 NA NA NA ## 10 10 NA NA ## 11 11 NA NA ## 12 12 NA NA ## 13 13 NA NA ## 14 14 NA NA ## 15 15 NA NA ## 16 16 NA NA ## 17 17 NA NA ## 18 18 NA NA ## 19 19 NA NA ## 20 20 NA NA Code # Solución para resolver los NA. Cual problema hay con usar NA? datos_NA %&gt;% dplyr::select(value) %&gt;% mutate(Prom_cum=cummean(replace_na(value, 0))) %&gt;% mutate(Var_cum=cumstats::cumvar(replace_na(value, 0))) ## # A tibble: 20 × 3 ## value Prom_cum Var_cum ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 NA ## 2 2 1.5 0.5 ## 3 3 2 1 ## 4 4 2.5 1.67 ## 5 5 3 2.5 ## 6 6 3.5 3.5 ## 7 7 4 4.67 ## 8 8 4.5 6 ## 9 NA 4 7.5 ## 10 10 4.6 10.3 ## 11 11 5.18 13.0 ## 12 12 5.75 15.7 ## 13 13 6.31 18.4 ## 14 14 6.86 21.2 ## 15 15 7.4 24.1 ## 16 16 7.94 27.1 ## 17 17 8.47 30.3 ## 18 18 9 33.5 ## 19 19 9.53 36.9 ## 20 20 10.0 40.5 ## Pruebas no paraméticas La pruebas no paramétricas no son basado en distribución normal y los indices como promedio, descviación estandard no se usan. ## min_rank() y # min_rank(desc()) Asignar valores de rangos a los valores originales o de más grande a meas pequeño o vise versa. r set.seed(45678) x &lt;- sample(1:50, 10) head(x) ## [1] 22 1 36 46 7 39 r df=as.tibble(x) df ## # A tibble: 10 × 1 ## value ## &lt;int&gt; ## 1 22 ## 2 1 ## 3 36 ## 4 46 ## 5 7 ## 6 39 ## 7 34 ## 8 10 ## 9 24 ## 10 30 r df %&gt;% dplyr::select(value) %&gt;% mutate(rango_minimo=min_rank(value)) %&gt;% mutate(rango_min_desc=min_rank(desc(value)) ) ## # A tibble: 10 × 3 ## value rango_minimo rango_min_desc ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 22 4 7 ## 2 1 1 10 ## 3 36 8 3 ## 4 46 10 1 ## 5 7 2 9 ## 6 39 9 2 ## 7 34 7 4 ## 8 10 3 8 ## 9 24 5 6 ## 10 30 6 5 ## row_number() Qué hace la función row_number? r set.seed(45678) y &lt;- c(10,21,22,NA,5,4) head(y) ## [1] 10 21 22 NA 5 4 r df=as.tibble(y) df ## # A tibble: 6 × 1 ## value ## &lt;dbl&gt; ## 1 10 ## 2 21 ## 3 22 ## 4 NA ## 5 5 ## 6 4 r df %&gt;% dplyr::select(value) %&gt;% mutate(row=row_number(value)) # equivalente a rank, ## # A tibble: 6 × 2 ## value row ## &lt;dbl&gt; &lt;int&gt; ## 1 10 3 ## 2 21 4 ## 3 22 5 ## 4 NA NA ## 5 5 2 ## 6 4 1 ## dense_rank() r set.seed(45678) z &lt;- c(10,12,12,NA,51,4) df=as.tibble(z) df ## # A tibble: 6 × 1 ## value ## &lt;dbl&gt; ## 1 10 ## 2 12 ## 3 12 ## 4 NA ## 5 51 ## 6 4 r df %&gt;% dplyr::select(value) %&gt;% mutate(dense=dense_rank(value)) # equivalente a rank, NOTA que los NA no son asignado un valor ## # A tibble: 6 × 2 ## value dense ## &lt;dbl&gt; &lt;int&gt; ## 1 10 2 ## 2 12 3 ## 3 12 3 ## 4 NA NA ## 5 51 4 ## 6 4 1 5.26 la función percent_rank() Code set.seed(45678) w &lt;- c(1,2,2,NA,5,4) w ## [1] 1 2 2 NA 5 4 Code df=as.tibble(w) df ## # A tibble: 6 × 1 ## value ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 2 ## 4 NA ## 5 5 ## 6 4 Code df %&gt;% dplyr::select(value) %&gt;% mutate(porcentaje_rank=percent_rank(value)) # equivalente a rank, Un número entre a 0 y 1 calculado haciendo una re-escala de los valores usando min_rank to [0, 1]. NOTA que el valor más pequeño es reasignado un valor de 0 y el más grande un valor de 1. ## # A tibble: 6 × 2 ## value porcentaje_rank ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0 ## 2 2 0.25 ## 3 2 0.25 ## 4 NA NA ## 5 5 1 ## 6 4 0.75 5.27 la función percent_rank() sin NA Code set.seed(45678) x2 &lt;- sample(1:50, 7) df2=as.tibble(x2) df2 ## # A tibble: 7 × 1 ## value ## &lt;int&gt; ## 1 22 ## 2 1 ## 3 36 ## 4 46 ## 5 7 ## 6 39 ## 7 34 Code df2 %&gt;% dplyr::select(value) %&gt;% mutate(porc2=percent_rank(value)) ## # A tibble: 7 × 2 ## value porc2 ## &lt;int&gt; &lt;dbl&gt; ## 1 22 0.333 ## 2 1 0 ## 3 36 0.667 ## 4 46 1 ## 5 7 0.167 ## 6 39 0.833 ## 7 34 0.5 5.28 la función cume_dist() Es la suma cumulativa de los rangos Code set.seed(45678) x &lt;- c(1,2,3,NA,5,4, 10, 8) x ## [1] 1 2 3 NA 5 4 10 8 Code df=as.tibble(x) df ## # A tibble: 8 × 1 ## value ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 NA ## 5 5 ## 6 4 ## 7 10 ## 8 8 Code df %&gt;% dplyr::select(value) %&gt;% mutate(rangos_cumulativo=cume_dist(value)) ## # A tibble: 8 × 2 ## value rangos_cumulativo ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0.143 ## 2 2 0.286 ## 3 3 0.429 ## 4 NA NA ## 5 5 0.714 ## 6 4 0.571 ## 7 10 1 ## 8 8 0.857 Ejercicios: Hacer los ejercicios en la sección 5.5.2 del libro en español Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento. ¿Cómo quieres manejar los empates? Lee atentamente la documentación de min_rank(). Code names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; Code vuelos%&gt;% dplyr::select(atraso_salida, aerolinea)%&gt;% arrange(desc(atraso_salida))%&gt;% mutate(mas_atrados=min_rank(desc(atraso_salida))) %&gt;% head(n=10) ## # A tibble: 10 × 3 ## atraso_salida aerolinea mas_atrados ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 1301 HA 1 ## 2 1137 MQ 2 ## 3 1126 MQ 3 ## 4 1014 AA 4 ## 5 1005 MQ 5 ## 6 960 DL 6 ## 7 911 DL 7 ## 8 899 DL 8 ## 9 898 DL 9 ## 10 896 AA 10 Code names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; Code vuelos %&gt;% arrange(atraso_salida) %&gt;% mutate(rango_minimo=min_rank(atraso_salida)) %&gt;% head(n=10) ## # A tibble: 10 × 20 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 12 7 2040 2123 -43 ## 2 2013 2 3 2022 2055 -33 ## 3 2013 11 10 1408 1440 -32 ## 4 2013 1 11 1900 1930 -30 ## 5 2013 1 29 1703 1730 -27 ## 6 2013 8 9 729 755 -26 ## 7 2013 10 23 1907 1932 -25 ## 8 2013 3 30 2030 2055 -25 ## 9 2013 3 2 1431 1455 -24 ## 10 2013 5 5 934 958 -24 ## # ℹ 14 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt;, rango_minimo &lt;int&gt; 5.29 Resúmenes con summarise() by group using group_by() Code library(datos) library(nycflights13) summarise(flights, delay = mean(dep_delay, na.rm = TRUE)) ## # A tibble: 1 × 1 ## delay ## &lt;dbl&gt; ## 1 12.6 Code flights %&gt;% summarise(delay = mean(dep_delay, na.rm = TRUE)) ## # A tibble: 1 × 1 ## delay ## &lt;dbl&gt; ## 1 12.6 Code by_day &lt;- group_by(flights, year, month, day) summarise(by_day, delay = mean(dep_delay, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the ## `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # ℹ 355 more rows Code flights %&gt;% group_by(year, month, day) %&gt;% summarise(delay = mean(dep_delay, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the ## `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # ℹ 355 more rows 5.30 La aerolinea peor en atraso de salidas Code flights %&gt;% group_by(carrier) %&gt;% summarise(delay = mean(dep_delay, na.rm = TRUE)) %&gt;% arrange(desc(delay)) ## # A tibble: 16 × 2 ## carrier delay ## &lt;chr&gt; &lt;dbl&gt; ## 1 F9 20.2 ## 2 EV 20.0 ## 3 YV 19.0 ## 4 FL 18.7 ## 5 WN 17.7 ## 6 9E 16.7 ## 7 B6 13.0 ## 8 VX 12.9 ## 9 OO 12.6 ## 10 UA 12.1 ## 11 MQ 10.6 ## 12 DL 9.26 ## 13 AA 8.59 ## 14 AS 5.80 ## 15 HA 4.90 ## 16 US 3.78 Code by_dest &lt;- group_by(flights, dest) by_dest ## # A tibble: 336,776 × 19 ## # Groups: dest [105] ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## 7 2013 1 1 555 600 -5 913 854 ## 8 2013 1 1 557 600 -3 709 723 ## 9 2013 1 1 557 600 -3 838 846 ## 10 2013 1 1 558 600 -2 753 745 ## # ℹ 336,766 more rows ## # ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, ## # hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Code delay &lt;- summarise(by_dest, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm = TRUE)) delay ## # A tibble: 105 × 4 ## dest count dist delay ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABQ 254 1826 4.38 ## 2 ACK 265 199 4.85 ## 3 ALB 439 143 14.4 ## 4 ANC 8 3370 -2.5 ## 5 ATL 17215 757. 11.3 ## 6 AUS 2439 1514. 6.02 ## 7 AVL 275 584. 8.00 ## 8 BDL 443 116 7.05 ## 9 BGR 375 378 8.03 ## 10 BHM 297 866. 16.9 ## # ℹ 95 more rows Code #&gt; `summarise()` ungrouping output (override with `.groups` argument) delay &lt;- filter(delay, count &gt; 20, dest != &quot;HNL&quot;) # It looks like delays increase with distance up to ~750 miles # and then decrease. Maybe as flights get longer there&#39;s more # ability to make up delays in the air? ggplot(data = delay, aes(x = dist, y = delay)) + geom_point(aes(size = count), alpha = 1/3) + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; Code #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Code names(delay) ## [1] &quot;dest&quot; &quot;count&quot; &quot;dist&quot; &quot;delay&quot; Code head(delay) ## # A tibble: 6 × 4 ## dest count dist delay ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABQ 254 1826 4.38 ## 2 ACK 265 199 4.85 ## 3 ALB 439 143 14.4 ## 4 ATL 17215 757. 11.3 ## 5 AUS 2439 1514. 6.02 ## 6 AVL 275 584. 8.00 Code ggplot(data = delay, aes(x = dist, y = delay, label=dest)) + geom_point() + geom_smooth(se = FALSE)+ geom_text(size=2,aes(label=dest), hjust=1, vjust=-1) ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; ## Warning: The following aesthetics were dropped during statistical transformation: label. ## ℹ This can happen when ggplot fails to infer the correct grouping structure in ## the data. ## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical ## variable into a factor? Ejercicios: Hacer los ejercicios en la sección 5.6.7 del libro en español 5.31 El Pipe %&gt;% “El pipe” 5.32 Otras funciones: NA na.rm=TRUE !is.na() = is not NA, pq al frente tiene “!” Code no_cancelados &lt;- vuelos %&gt;% filter(!is.na(atraso_salida), !is.na(atraso_llegada)) no_cancelados ## # A tibble: 327,346 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # ℹ 327,336 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; Code no_cancelados %&gt;% group_by(anio, mes, dia) %&gt;% summarise(mean = mean(atraso_salida)) ## `summarise()` has grouped output by &#39;anio&#39;, &#39;mes&#39;. You can override using the ## `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: anio, mes [12] ## anio mes dia mean ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.4 ## 2 2013 1 2 13.7 ## 3 2013 1 3 10.9 ## 4 2013 1 4 8.97 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.56 ## 9 2013 1 9 2.30 ## 10 2013 1 10 2.84 ## # ℹ 355 more rows Code vuelos %&gt;% group_by(anio, mes, dia) %&gt;% summarise(mean = mean(atraso_salida, na.rm=TRUE)) ## `summarise()` has grouped output by &#39;anio&#39;, &#39;mes&#39;. You can override using the ## `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: anio, mes [12] ## anio mes dia mean ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # ℹ 355 more rows Code #, # max=max(atraso_salida,na.rm = TRUE), # n=n()) 5.33 Otras funciones: Tarea de grupo. Preparar un .rmd con la explicaciones de como utilizar la función mencionado abajo. Debe incluir La definición de la función en palabra y matemática. un script sencillo (con pocos datos) (uno o más ejemplos) para explicar la función un script con los datos de “vuelos” o de “Covid-19 de PR”. a las 2:20pm cada grupo presentará su trabajo. Despues de la clase cada grupo, mejorará su .rmd con los comentarios recibidos. Domingo se subirá el .rmd y el .html en Edmodo (cada estudiante lo subira: tendra el nombre de cada estudiante en el trabajo) El profesor revisará los trabajos y subsiguiente se distribuira los .rmd y html a los estudiantes. IQR() ## G1 mad() ## G2 first() ## G3 last() ## G3 quantile() ## G4 signif() ## G5 min() max() mean() sd() *** Ejercicios: Hacer los ejercicios en la sección 5.7.1 del libro en español Rolling average: https://stackoverflow.com/questions/743812/calculating-moving-average Code library(tidyverse) library(zoo) ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:data.table&#39;: ## ## yearmon, yearqtr ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric Code some_data = tibble(day = 1:10) some_data ## # A tibble: 10 × 1 ## day ## &lt;int&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## 7 7 ## 8 8 ## 9 9 ## 10 10 Code # cma = centered moving average # tma = trailing moving average some_data %&gt;% mutate(cma = rollmean(day, k = 3, fill = NA)) %&gt;% mutate(tma = rollmean(day, k = 3, fill = NA, align = &quot;right&quot;)) %&gt;% mutate(lma = rollmean(day, k = 3, fill = NA, align = &quot;left&quot;)) %&gt;% mutate(cmax=rollmax(day, k=30, fill=NA)) ## # A tibble: 10 × 5 ## day cma tma lma cmax ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 1 NA NA 2 NA ## 2 2 2 NA 3 NA ## 3 3 3 2 4 NA ## 4 4 4 3 5 NA ## 5 5 5 4 6 NA ## 6 6 6 5 7 NA ## 7 7 7 6 8 NA ## 8 8 8 7 9 NA ## 9 9 9 8 NA NA ## 10 10 NA 9 NA NA Code some_data ## # A tibble: 10 × 1 ## day ## &lt;int&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## 7 7 ## 8 8 ## 9 9 ## 10 10 Code library(tidyverse) library(dplyr) some_data |&gt; mutate(day_p = if_else(day %in% c(0:3), &quot;pre&quot;, if_else(day %in% c(4:10), &quot;normal&quot;, NA_character_))) ## # A tibble: 10 × 2 ## day day_p ## &lt;int&gt; &lt;chr&gt; ## 1 1 pre ## 2 2 pre ## 3 3 pre ## 4 4 normal ## 5 5 normal ## 6 6 normal ## 7 7 normal ## 8 8 normal ## 9 9 normal ## 10 10 normal Code y=runif(10000, 0, 100) y=as.data.frame(y) head(y) # los primeros 6 valores ## y ## 1 92.51342 ## 2 33.39988 ## 3 23.58930 ## 4 33.66312 ## 5 74.88829 ## 6 93.27177 Code library(ggplot2) ggplot(y, aes(y))+ geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
