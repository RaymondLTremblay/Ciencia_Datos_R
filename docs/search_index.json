[["index.html", "4_Transformacion_dplyr BIOL4026 Chapter 1 Ciencia de Datos con R", " 4_Transformacion_dplyr BIOL4026 Raymond L. Tremblay 2023-08-09 Chapter 1 Ciencia de Datos con R Instructor: Raymond L. Tremblay, PhD Oficina: NL 104 Teléfono: (787) 850-0000 (dept de biología) Coreo electrónico: raymond.tremblay_at_upr_dot_edu 1.0.1 Horario de clase Presentación de temas y discusión: Lunes y miercoles 4:30-5:50pm (80 mins) (NOTE: Necesita traer su laptop!) Hora de consulta con Estudiantes: Lunes y miercoles de 1:00 a 4:00pm (NL 104). 1.0.2 Libros sugeridos Garrett Grolemund, Hadley Wickham. R for Data Science En Ingles. Garrett Grolemund, Hadley Wickham. R para Ciencia de Datos En Español. Tremblay y Hernández-Serrano, 2018. • Artículos revisados por pares serán asignados para fomentar el método de utilizar estas herramientas en ciencias. 1.0.3 Programados R- free statistical programming language RStudio MSExcel, Numbers o Google Sheet 1.0.4 Prerequisitos Ninguno 1.0.5 Descripción del curso Estudio de diferentes técnicas estadísticas con aplicación a la Biología. Se enfatizará en la estadística descriptiva, análisis de regresiones y correlaciones, pruebas de hipótesis paramétricas y no paramétricas y análisis de frecuencias y varianza. Se hará énfasis en los supuestos de las pruebas, para seleccionar cual método estadístico es adecuado para el diseño experimental y la distribución de los datos. Además, se utilizarán las computadoras como mecanismos para facilitar y agilizar el cómputo y análisis estadístico. 1.0.6 Objetivos del curso Tema general del curso - Desarrollar destrezas de organizar y evaluar datos para contestar preguntas cuantitativas con R, RStudio, RMarkdown y Quarto y otros programados 1.0.7 Puntuación: Este curso sera evaluado con los siguiente items: Item Valor Ejercicios práctico (10-15 total) 80% Participación en clase 10% Asistencia a clase 10% NOTE: Escala de Notas: A (100 to 90) B (89 to 80) C (79 to 70) D (69 to 60) F (&lt; 60) 1.0.8 Examenes: Habrá dos examen parciales y un examen final comprensivo. Estos exámenes serán de selecciones múltiples, pareo, respuesta corta, y análisis de conceptos. El examen final será comprensivo (incluye todos los temas del semestre). En este examen final se hará énfasis en la comprensión y aplicaciones de los supuestos de las pruebas y la capacidad de seleccionar la prueba correcta basado en el diseño experimental y los supuestos. 1.0.9 Es obligatorio tener la camera prendida durante todo el exámen. No es permitido usar el celular, Ud. tendrá que demostrar que el celular este detrás de uds antes de comenzar el examen 1.0.10 Conferencias En la clase las notas serán basado primeramente en la participación y algunas pruebas cortas. Su participación es esencial para el aprendizaje (y para un ambiente positivo). Aprender NO es un proceso pasivo: los estudiantes deben participar haciendo preguntas y discutir el material con su conocimiento anterior (Su bagaje de conocimiento). 1.0.11 Ejercicios Los ejercicios están enfocado en la aplicación de conceptos y métodos discutido en la clase y solución de problemas. Se hará un esfuerza de usar datos reales para demostrar como trabajar con los análisis, tablas, y gráficos en R, RStudio y RMarkdown. Típicamente, tendrán solamente una semana para hacer los ejercicios y entregarlos en formato .html. 1.0.12 Faltar a clase y examen: Los trabajos cortos y pruebas cortas NO se reponen. Si falta a la clase es su responsabilidad hablar con los otros estudiantes para saber lo que se discutió en la clase. Los examen se reponen solamente por una escusa valida. 1.0.13 Derechos de Estudiantes con Impedimentos La UPR-Humacao cumple con las leyes ADA (Americans with Disabilities Act) y 51 (Servicios Educativos Integrales para Personas con Impedimentos) para garantizar igualdad en el acceso a la educación y servicios. Estudiantes con impedimentos: informe al (la) profesor(a) de cada curso sobre sus necesidades especiales y/o de acomodo razonable para el curso, en la tarjeta de información de la primera semana y visite la Oficina de Servicios para la Población con Impedimentos (SERPI) a la brevedad posible. Se mantendrá la confidencialidad. 1.0.14 Integridad académica La Universidad de Puerto Rico promueve los más altos estándares de integridad académica y científica. El Artículo 6.2 del Reglamento General de Estudiantes de la Universidad de Puerto Rico (Certificación Núm. 13, 2009-2010, de la Junta de Síndicos) establece que “la deshonestidad académica incluye, pero no se limita a: acciones fraudulentas, la obtención de notas o grados académicos valiéndose de falsas o fraudulentas simulaciones, copiar total o parcialmente la labor académica de otra persona, plagiar total o parcialmente el trabajo de otra persona, copiar total o parcialmente las respuestas de otra persona a las preguntas de un examen, haciendo o consiguiendo que otro tome en su nombre cualquier prueba o examen oral o escrito, así como la ayuda o facilitación para que otra persona incurra en la referida conducta”. Cualquiera de estas acciones estará sujeta a sanciones disciplinarias en conformidad con el procedimiento disciplinario establecido en el Reglamento General de Estudiantes de la UPR vigente. 1.0.15 Comentario sobre grabar videos y/o audio de las clases Los estudiantes no PUEDEN grabar la clase por forma de video o audio sin el permiso del profesor. Algunos estudiantes con necesidades especiales pueden hablar con el profesor para pedir el permiso. La solicitud y aprobación del permiso tiene que ser por escrito (por ejemplo por email). 1.0.16 Espacio libre de acoso sexual La Universidad de Puerto Rico prohíbe el descrimen por razón de sexo y género en todas sus modalidades, incluyendo el hostigamiento sexual. Según la Política Institucional contra el hostigamiento sexual, en la Universidad de Puerto Rico, Cert. Núm. 130 (2014-2015) de la Junta de Gobierno, si un(a) estudiante está siendo o fue afectado por conductas relacionadas a hostigamiento sexual, puede acudir ante la Oficina del Procurador Estudiantil, el Decanato de Estudiantes o el Coordinador de Cumplimiento con Título IX para una orientación o presentar una querella. 1.0.17 Protocolo de la Clase Los teléfonos mobiles serán apagado durante la clase. Si necesita una calculadora traerla al salón. El teléfono no debería esta visible durante la clase al menos que pide permiso al instructor. Recuerda que que se usara computadoras portátiles en cada sesión. "],["flujo-de-trabajo.html", "Chapter 2 Flujo de trabajo 2.1 Temas: 2.2 Creación de un proyecto: 2.3 Transformación estadística", " Chapter 2 Flujo de trabajo El tema proviene de los siguientes sitios. English: https://r4ds.had.co.nz/workflow-projects.html Español: https://r4ds-en-espaniol.netlify.app/flujo-de-trabajo-conocimientos-básicos.html 2.1 Temas: Reduciendo Errores getwd() setwd() Su Proyecto 2.2 Creación de un proyecto: crear un proyecto para cada curso crear un proyecto para cada investigación No se te olvida de añadir tu archivos de datos en el proyecto Describe claramente todos tus análisis y donde conseguiste la información Describe tu interpretación de los análisis o gráficos Correr los “scripts” uno a la vez para asegurar que funcione knit el archivo .rmd para asegurar que no falte nada. no mezclar proyectos de investigación en un mismo proyecto #install.packages(&quot;tidyverse&quot;) library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.2 ✔ readr 2.1.4 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.2 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.2 ✔ tidyr 1.3.0 ## ✔ purrr 1.0.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors # install.packages(&quot;datos&quot;) library(datos) millas ## # A tibble: 234 × 11 ## fabricante modelo cilindrada anio cilindros transmision traccion ciudad ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 audi a4 1.8 1999 4 auto(l5) d 18 ## 2 audi a4 1.8 1999 4 manual(m5) d 21 ## 3 audi a4 2 2008 4 manual(m6) d 20 ## 4 audi a4 2 2008 4 auto(av) d 21 ## 5 audi a4 2.8 1999 6 auto(l5) d 16 ## 6 audi a4 2.8 1999 6 manual(m5) d 18 ## 7 audi a4 3.1 2008 6 auto(av) d 18 ## 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 ## 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 ## 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 ## # ℹ 224 more rows ## # ℹ 3 more variables: autopista &lt;int&gt;, combustible &lt;chr&gt;, clase &lt;chr&gt; ggplot(data = millas) + geom_point(mapping = aes(x = cilindrada, y = autopista)) ggplot(data=millas) head(millas) ## # A tibble: 6 × 11 ## fabricante modelo cilindrada anio cilindros transmision traccion ciudad ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 audi a4 1.8 1999 4 auto(l5) d 18 ## 2 audi a4 1.8 1999 4 manual(m5) d 21 ## 3 audi a4 2 2008 4 manual(m6) d 20 ## 4 audi a4 2 2008 4 auto(av) d 21 ## 5 audi a4 2.8 1999 6 auto(l5) d 16 ## 6 audi a4 2.8 1999 6 manual(m5) d 18 ## # ℹ 3 more variables: autopista &lt;int&gt;, combustible &lt;chr&gt;, clase &lt;chr&gt; ?millas dim(millas) ## [1] 234 11 ggplot(data = millas) + geom_point(mapping = aes(x = cilindrada, y = autopista, alpha = fabricante, colour=fabricante)) ## Warning: Using alpha for a discrete variable is not advised. ggplot(data = millas) + geom_point(mapping = aes(x = cilindrada, y = autopista), shape=11, color = &quot;#c093cc&quot;, fill=&quot;yellow&quot;) ggplot(data = millas) + geom_point(mapping = aes(x = cilindrada, y = autopista), color = &quot;blue&quot;) ggsave(&quot;cilindro_milla.jpg&quot;) #. png, .tiff ## Saving 7 x 5 in image millas ## # A tibble: 234 × 11 ## fabricante modelo cilindrada anio cilindros transmision traccion ciudad ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 audi a4 1.8 1999 4 auto(l5) d 18 ## 2 audi a4 1.8 1999 4 manual(m5) d 21 ## 3 audi a4 2 2008 4 manual(m6) d 20 ## 4 audi a4 2 2008 4 auto(av) d 21 ## 5 audi a4 2.8 1999 6 auto(l5) d 16 ## 6 audi a4 2.8 1999 6 manual(m5) d 18 ## 7 audi a4 3.1 2008 6 auto(av) d 18 ## 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 ## 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 ## 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 ## # ℹ 224 more rows ## # ℹ 3 more variables: autopista &lt;int&gt;, combustible &lt;chr&gt;, clase &lt;chr&gt; Ejercicio para someter: baja el paquete “ggversa” activar el paquete “ggversa” mirar las variables del archivo en este paquete que se llama “Anolis” haga un gráfico que incluye lo siguiente en el eje de x = el SVL. que es el tamaño del lagarto del hocico a la cloaca y en la variable de “TAIL” en el eje de y. selecciona la variable “SEX_AGE” para color selecciona la función correcta para que cada “SEX_AGE” tenga su proprio gráfico salva el gráfico en .png o .jpg subir el gráfico aquí library(ggversa) head(Anolis) ## # A tibble: 6 × 15 ## STUDY Survey_Site LOCATION TIME DATE SEASON SPECIES SEX_AGE HEIGHT ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;tim&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Mark/recap North Tower El Verde 10:46 3/13… dry Anolis… Female 0 ## 2 Mark/recap Woods walkway t… El Verde 10:15 2/20… dry Anolis… Juvenil 0 ## 3 Mark/recap Woods walkway t… El Verde 11:15 2/21… dry Anolis… Male 0 ## 4 Mark/recap North Tower El Verde 11:06 3/16… dry Anolis… Juvenil 0.3 ## 5 Mark/recap North Tower El Verde 12:31 3/11… dry Anolis… Male 0.3 ## 6 Mark/recap North Tower El Verde 01:00 3/9/… dry Anolis… Female 0.4 ## # ℹ 6 more variables: DISTANCE_FROM_CENTERLINE &lt;dbl&gt;, PERCH_SUBSTRATE &lt;chr&gt;, ## # PERCH_DIAMETER &lt;int&gt;, WEIGHT &lt;dbl&gt;, SVL &lt;dbl&gt;, TAIL &lt;dbl&gt; ggplot(data = Anolis) + geom_point(mapping = aes(x = SVL, y = TAIL, color=SEX_AGE))+ facet_wrap(~SEX_AGE, ncol=1) ## Warning: Removed 418 rows containing missing values (`geom_point()`). # izquierda ggplot(data = millas) + geom_point(mapping = aes(x = cilindrada, y = autopista)) # derecha LOESS ggplot(data = millas) + geom_smooth(method=lm,mapping = aes(x = cilindrada, y = autopista))+ # y = mx+b geom_point( mapping = aes(x = cilindrada, y = autopista)) ## `geom_smooth()` using formula = &#39;y ~ x&#39; names(millas) ## [1] &quot;fabricante&quot; &quot;modelo&quot; &quot;cilindrada&quot; &quot;anio&quot; &quot;cilindros&quot; ## [6] &quot;transmision&quot; &quot;traccion&quot; &quot;ciudad&quot; &quot;autopista&quot; &quot;combustible&quot; ## [11] &quot;clase&quot; ggplot(data = millas) + geom_smooth(mapping = aes(x = cilindrada, y = autopista, linetype = clase, colour=clase)) ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : span too small. fewer data values than degrees of freedom. ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : pseudoinverse used at 5.6935 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : neighborhood radius 0.5065 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : reciprocal condition number 0 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : There are other near singularities as well. 0.65044 ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : span too small. fewer ## data values than degrees of freedom. ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## 5.6935 ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 0.5065 ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 0 ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 0.65044 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : pseudoinverse used at 4.008 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : neighborhood radius 0.708 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : reciprocal condition number 0 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric, ## : There are other near singularities as well. 0.25 ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## 4.008 ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 0.708 ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 0 ## Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x ## else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 0.25 ggplot(data = millas, mapping = aes(x = cilindrada, y = autopista)) + geom_point(mapping = aes(color = clase)) + geom_smooth(data = filter(millas, clase == &quot;suv&quot;), se =TRUE) ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; ggplot(data = millas, mapping = aes(x = cilindrada, y = autopista)) + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; ggplot() + geom_point(data = millas, mapping = aes(x = cilindrada, y = autopista)) + geom_smooth(data = millas, mapping = aes(x = cilindrada, y = autopista)) ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; ggplot(data = millas, mapping = aes(x = cilindrada, y = autopista)) + geom_point(mapping = aes(color = clase)) + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; 2.3 Transformación estadística head(diamantes) ## # A tibble: 6 × 10 ## precio quilate corte color claridad profundidad tabla x y z ## &lt;int&gt; &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 326 0.23 Ideal E SI2 61.5 55 3.95 3.98 2.43 ## 2 326 0.21 Premium E SI1 59.8 61 3.89 3.84 2.31 ## 3 327 0.23 Bueno E VS1 56.9 65 4.05 4.07 2.31 ## 4 334 0.29 Premium I VS2 62.4 58 4.2 4.23 2.63 ## 5 335 0.31 Bueno J SI2 63.3 58 4.34 4.35 2.75 ## 6 336 0.24 Muy bueno J VVS2 62.8 57 3.94 3.96 2.48 nrow(diamantes) ## [1] 53940 ncol(diamantes) ## [1] 10 dim(diamantes) ## [1] 53940 10 max(diamantes$precio) ## [1] 18823 min(diamantes$precio) ## [1] 326 unique(diamantes$corte) ## [1] Ideal Premium Bueno Muy bueno Regular ## Levels: Regular &lt; Bueno &lt; Muy bueno &lt; Premium &lt; Ideal #diamantes$corte #diamantes$precio ggplot(data = diamantes) + geom_bar(mapping = aes(x = corte)) ggplot(data = diamantes) + stat_summary( mapping = aes(x = corte, y = profundidad), fun.min = min, fun.max = max, fun = median ) x=c(1:100, NA) x ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 100 NA mean(x, na.rm=TRUE) ## [1] 50.5 ggplot(data = millas, mapping = aes(x = clase, y = autopista)) + geom_boxplot() ggplot(data = millas, mapping = aes(x = clase, y = autopista)) + geom_boxplot() + coord_flip() bar &lt;- ggplot(data = diamantes) + geom_bar( mapping = aes(x = corte, fill = corte), show.legend = FALSE, width = 1 ) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL) bar bar + coord_flip() bar + coord_polar() library(readr) Vuelos_SJU_2018_Ene &lt;- read_csv(&quot;Datos/Vuelos_SJU_2018_Ene.csv&quot;) ## Rows: 3831 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (8): FL_DATE, OP_UNIQUE_CARRIER, ORIGIN, ORIGIN_CITY_NAME, ORIGIN_STATE_... ## dbl (6): DEP_TIME, DEP_DELAY, CRS_ARR_TIME, ARR_TIME, ARR_DELAY, CANCELLED ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(Vuelos_SJU_2018_Ene) ## # A tibble: 6 × 14 ## FL_DATE OP_UNIQUE_CARRIER ORIGIN ORIGIN_CITY_NAME ORIGIN_STATE_ABR DEST ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2/1/18 NK SJU San Juan, PR PR MCO ## 2 2/1/18 AA MIA Miami, FL FL SJU ## 3 2/1/18 AA SJU San Juan, PR PR DFW ## 4 2/1/18 AA SJU San Juan, PR PR MIA ## 5 2/1/18 AA SJU San Juan, PR PR ORD ## 6 2/1/18 AA MIA Miami, FL FL SJU ## # ℹ 8 more variables: DEST_CITY_NAME &lt;chr&gt;, DEST_STATE_ABR &lt;chr&gt;, ## # DEP_TIME &lt;dbl&gt;, DEP_DELAY &lt;dbl&gt;, CRS_ARR_TIME &lt;dbl&gt;, ARR_TIME &lt;dbl&gt;, ## # ARR_DELAY &lt;dbl&gt;, CANCELLED &lt;dbl&gt; "],["visualización-de-datos.html", "Chapter 3 Visualización de datos 3.1 Temas:", " Chapter 3 Visualización de datos Fecha de la ultima revisión ## [1] &quot;2023-08-09&quot; El tema proviene de los siguientes sitios. English: https://r4ds.had.co.nz/data-visualisation.html Español: https://r4ds-en-espaniol.netlify.app/visualización-de-datos.html 3.1 Temas: Introducción paquete “tidyverse” datos de “mgp” ggplot2 El concepto de la gramática de gráficos Ejercicios: Hacer los ejercicios en la sección 3.2.4 del libro en español Aestética Ejercicios: Hacer los ejercicios en la sección 3.3.1 del libro en español Problemas comunes Separar en facetas Ejercicios: Hacer los ejercicios en la sección 3.5.1 del libro en español Objetos geométricos *** Ejercicios: Hacer los ejercicios en la sección 3.6.1 del libro en español Transformación estadísticas Ejercicios: Hacer los ejercicios en la sección 3.7.1 del libro en español Ajuste de posición Ejercicios: Hacer los ejercicios en la sección 3.8.1 del libro en español Sistema de coordenadas Ejercicios: Hacer los ejercicios en la sección 3.9.1 del libro en español Ejercicio para entregar ( 6 puntos) Activa el paquete “ggversa” Activa el paquete “tidyverse” Utiliza los datos “PartosInfantes”. Leen la información sobre el archivo Son tres graficas que tendrán que someter Hacer un gráfico de puntos entre el número de muertes de infante y la cantidad de madres que mueren en el parto. (1 punto) Añadir al gráfico anterior un modelo lineal (linear model). Y Demostrando todos los datos con un color por region geografica, o sea añadir un color a los puntos por Grupo “region geográfica”. AM=America, EU= Union Europea, AF= Africa, O=Oceania, AS=Asia, Medio Oriente, (2 puntos) Enseña el modelo de regresion lineal solamente para AFRICA y ASIA (en la misma gráfica) (3 puntos) Someter las tres gráficas en formato .jpeg o .png en el portal. library(ggplot2) library(tidyverse) library(ggversa) ?PartosInfantes head(PartosInfantes) ## NMI NMP GSPC Grupo Pais ## 1 8723 400 605.1878 AM Argentina ## 2 60 5 1720.1595 AM Bahamas ## 3 42 1 1146.0417 AM Barbados ## 4 121 2 278.5792 AM Belize ## 5 7756 540 208.7842 AM Bolivia ## 6 45682 1400 947.4277 AM Brazil #unique(PartosInfantes$Pais) Hacer un grafico de puntos entre el numero de muertes por infante y la cantidad la cantidad de madres que mueren en el parto Añadir al grafico anterior un modelo lineal (linear model) Añadir un color a los puntos por grupo “region”. AM=America, EU= Union Europea, AF= Africa, O=Oceania, AS=Asia, Medio Oriente, Demostrando todos los datos con un color por region geografica, enseña el modelo de regresion lineal solamente para AFRICA "],["calculadora-sofisticada.html", "Chapter 4 Calculadora sofisticada 4.1 Temas:", " Chapter 4 Calculadora sofisticada Fecha de la ultima revisión ## [1] &quot;2023-08-09&quot; ## [1] &quot;/Users/raymondtremblay/Dropbox/GitHub_Dropbox_Drive/GitHub/Ciencia_Datos_R&quot; El tema proviene de los siguientes sitios. English: https://r4ds.had.co.nz/workflow-basics.html Español: https://r4ds-en-espaniol.netlify.app/flujo-de-trabajo-conocimientos-básicos.html 4.1 Temas: Conocimiento básicos de programación La importancia de los nombres Usando funciones 2+2 ## [1] 4 (23+3+3)^2+2 ## [1] 843 sin(pi/3) ## [1] 0.8660254 log(100) ## [1] 4.60517 log2(100) ## [1] 6.643856 x&lt;- 4 x ## [1] 4 y=3 y ## [1] 3 x/y ## [1] 1.333333 edad_nd=base::seq(101, 110) edad_nd ## [1] 101 102 103 104 105 106 107 108 109 110 edad_uprh=c(11:20) edad_uprh ## [1] 11 12 13 14 15 16 17 18 19 20 edad=data.frame(edad_nd, edad_uprh) edad ## edad_nd edad_uprh ## 1 101 11 ## 2 102 12 ## 3 103 13 ## 4 104 14 ## 5 105 15 ## 6 106 16 ## 7 107 17 ## 8 108 18 ## 9 109 19 ## 10 110 20 library(tidyverse) library(datos) ggplot(data=millas) + geom_point(mapping = aes(x = cilindrada, y = autopista)) #filter(millas, cilindros = 8) #filter(diamante, quilate &gt; 3) length(edad_uprh) ## [1] 10 Ejercicios: Hacer los ejercicios en la sección 4.4 del libro en español Cual son los errores "],["transformacion.html", "Chapter 5 Transformacion 5.1 Temas: Reconocer y aplicar las diferentes funciones 5.2 starts_with(), ends_with() 5.3 rename() 5.4 Reoganizar el oden de las columnas 5.5 matches(“(.)\\1”) Lo veremos en la leccion de “STRING” 5.6 Hagan lo con el data set en espanol 5.7 transmute() 5.8 lag() 5.9 Usa “Lag” con “IncCasosSaludNuevo” en COVID-19 PR 5.10 lead(), 5.11 cumsum 5.12 cummean() and cumvar() 5.13 min_rank() y # min_rank(desc()) 5.14 row_number() 5.15 dense_rank() 5.16 percent_rank() 5.17 cume_dist() 5.18 Resúmenes con summarise() by group using group_by() 5.19 The worst airline in departure delays 5.20 El Pipe 5.21 Otras funciones: NA 5.22 Otras funciones:", " Chapter 5 Transformacion Fecha de la ultima revisión ## [1] &quot;2023-08-09&quot; El tema proviene de los siguientes sitios. English: https://r4ds.had.co.nz/transform.html Español: https://r4ds-en-espaniol.netlify.app/transform.html library(tidyverse) library(datos) head(vuelos) ## # A tibble: 6 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; unique(vuelos$destino) ## [1] &quot;IAH&quot; &quot;MIA&quot; &quot;BQN&quot; &quot;ATL&quot; &quot;ORD&quot; &quot;FLL&quot; &quot;IAD&quot; &quot;MCO&quot; &quot;PBI&quot; &quot;TPA&quot; &quot;LAX&quot; &quot;SFO&quot; ## [13] &quot;DFW&quot; &quot;BOS&quot; &quot;LAS&quot; &quot;MSP&quot; &quot;DTW&quot; &quot;RSW&quot; &quot;SJU&quot; &quot;PHX&quot; &quot;BWI&quot; &quot;CLT&quot; &quot;BUF&quot; &quot;DEN&quot; ## [25] &quot;SNA&quot; &quot;MSY&quot; &quot;SLC&quot; &quot;XNA&quot; &quot;MKE&quot; &quot;SEA&quot; &quot;ROC&quot; &quot;SYR&quot; &quot;SRQ&quot; &quot;RDU&quot; &quot;CMH&quot; &quot;JAX&quot; ## [37] &quot;CHS&quot; &quot;MEM&quot; &quot;PIT&quot; &quot;SAN&quot; &quot;DCA&quot; &quot;CLE&quot; &quot;STL&quot; &quot;MYR&quot; &quot;JAC&quot; &quot;MDW&quot; &quot;HNL&quot; &quot;BNA&quot; ## [49] &quot;AUS&quot; &quot;BTV&quot; &quot;PHL&quot; &quot;STT&quot; &quot;EGE&quot; &quot;AVL&quot; &quot;PWM&quot; &quot;IND&quot; &quot;SAV&quot; &quot;CAK&quot; &quot;HOU&quot; &quot;LGB&quot; ## [61] &quot;DAY&quot; &quot;ALB&quot; &quot;BDL&quot; &quot;MHT&quot; &quot;MSN&quot; &quot;GSO&quot; &quot;CVG&quot; &quot;BUR&quot; &quot;RIC&quot; &quot;GSP&quot; &quot;GRR&quot; &quot;MCI&quot; ## [73] &quot;ORF&quot; &quot;SAT&quot; &quot;SDF&quot; &quot;PDX&quot; &quot;SJC&quot; &quot;OMA&quot; &quot;CRW&quot; &quot;OAK&quot; &quot;SMF&quot; &quot;TUL&quot; &quot;TYS&quot; &quot;OKC&quot; ## [85] &quot;PVD&quot; &quot;DSM&quot; &quot;PSE&quot; &quot;BHM&quot; &quot;CAE&quot; &quot;HDN&quot; &quot;BZN&quot; &quot;MTJ&quot; &quot;EYW&quot; &quot;PSP&quot; &quot;ACK&quot; &quot;BGR&quot; ## [97] &quot;ABQ&quot; &quot;ILM&quot; &quot;MVY&quot; &quot;SBN&quot; &quot;LEX&quot; &quot;CHO&quot; &quot;TVC&quot; &quot;ANC&quot; &quot;LGA&quot; vuelos %&gt;% filter(destino==&quot;SJU&quot;) %&gt;% filter(mes==12, dia==25) # pipe Command shift M ## # A tibble: 21 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 12 25 604 611 -7 ## 2 2013 12 25 654 656 -2 ## 3 2013 12 25 712 705 7 ## 4 2013 12 25 730 730 0 ## 5 2013 12 25 736 739 -3 ## 6 2013 12 25 759 805 -6 ## 7 2013 12 25 947 947 0 ## 8 2013 12 25 1202 1206 -4 ## 9 2013 12 25 1254 900 234 ## 10 2013 12 25 1354 1330 24 ## # ℹ 11 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; library(tidyverse) vuelos %&gt;% filter(destino==&quot;SJU&quot;) ## # A tibble: 5,819 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 615 615 0 ## 2 2013 1 1 628 630 -2 ## 3 2013 1 1 701 700 1 ## 4 2013 1 1 711 715 -4 ## 5 2013 1 1 820 820 0 ## 6 2013 1 1 820 820 0 ## 7 2013 1 1 840 845 -5 ## 8 2013 1 1 926 929 -3 ## 9 2013 1 1 1202 1159 3 ## 10 2013 1 1 1245 1249 -4 ## # ℹ 5,809 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; df_dia_cumpl=vuelos %&gt;% filter(destino ==&quot;SJU&quot;) %&gt;% filter(mes== 8, dia== 1) df_dia_cumpl ## # A tibble: 19 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 8 1 32 2359 33 ## 2 2013 8 1 33 2231 122 ## 3 2013 8 1 609 611 -2 ## 4 2013 8 1 638 640 -2 ## 5 2013 8 1 655 655 0 ## 6 2013 8 1 704 705 -1 ## 7 2013 8 1 845 850 -5 ## 8 2013 8 1 854 900 -6 ## 9 2013 8 1 910 915 -5 ## 10 2013 8 1 918 730 108 ## 11 2013 8 1 1101 1055 6 ## 12 2013 8 1 1306 1255 11 ## 13 2013 8 1 1457 1455 2 ## 14 2013 8 1 1508 1429 39 ## 15 2013 8 1 1551 1545 6 ## 16 2013 8 1 1732 1706 26 ## 17 2013 8 1 2036 2007 29 ## 18 2013 8 1 2141 2101 40 ## 19 2013 8 1 2257 2115 102 ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos %&gt;% select(mes, dia, atraso_salida, atraso_llegada) %&gt;% filter(mes==11) %&gt;% arrange(desc(atraso_salida)) ## # A tibble: 27,268 × 4 ## mes dia atraso_salida atraso_llegada ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 11 3 798 796 ## 2 11 24 636 614 ## 3 11 4 413 434 ## 4 11 27 408 396 ## 5 11 20 398 389 ## 6 11 11 367 344 ## 7 11 21 351 346 ## 8 11 24 347 304 ## 9 11 24 341 290 ## 10 11 22 339 329 ## # ℹ 27,258 more rows 5.1 Temas: Reconocer y aplicar las diferentes funciones Tipos de variables: int dbl chr dttm lgl fctr date Funciones de dplyr: filter() arrange() select() summarize() group_by() library(datos) library(tidyverse) por_dia &lt;- group_by(vuelos, dia)%&gt;% summarise(atraso_promedio = mean(atraso_salida, na.rm = TRUE)) por_dia ## # A tibble: 31 × 2 ## dia atraso_promedio ## &lt;int&gt; &lt;dbl&gt; ## 1 1 14.2 ## 2 2 14.1 ## 3 3 10.8 ## 4 4 5.79 ## 5 5 7.82 ## 6 6 6.99 ## 7 7 14.3 ## 8 8 21.8 ## 9 9 14.6 ## 10 10 18.3 ## # ℹ 21 more rows vuelos %&gt;% select(anio, mes, dia, atraso_salida) %&gt;% group_by(mes) %&gt;% summarise(atraso = mean(atraso_salida, na.rm = TRUE)) ## # A tibble: 12 × 2 ## mes atraso ## &lt;int&gt; &lt;dbl&gt; ## 1 1 10.0 ## 2 2 10.8 ## 3 3 13.2 ## 4 4 13.9 ## 5 5 13.0 ## 6 6 20.8 ## 7 7 21.7 ## 8 8 12.6 ## 9 9 6.72 ## 10 10 6.24 ## 11 11 5.44 ## 12 12 16.6 Operaciones lógicas boolean: &amp; “ampersand” “|” or= “o” !, no incluye, excluir…. %in%, filtrar para multiples valores ==, es igual a… “exactamente” “&lt;” “&gt;” Bollean, que incluye multimple opciones %in% vuelos %&gt;% select(anio, mes, dia, atraso_salida) %&gt;% group_by(mes) %&gt;% filter(mes %in% c(1:6)) %&gt;% summarise(atraso = mean(atraso_salida, na.rm = TRUE)) ## # A tibble: 6 × 2 ## mes atraso ## &lt;int&gt; &lt;dbl&gt; ## 1 1 10.0 ## 2 2 10.8 ## 3 3 13.2 ## 4 4 13.9 ## 5 5 13.0 ## 6 6 20.8 Otra alternativa vuelos %&gt;% select(anio, mes, dia, atraso_salida) %&gt;% filter(mes == 11 | mes == 12) ## # A tibble: 55,403 × 4 ## anio mes dia atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 11 1 6 ## 2 2013 11 1 105 ## 3 2013 11 1 -5 ## 4 2013 11 1 -6 ## 5 2013 11 1 -3 ## 6 2013 11 1 -11 ## 7 2013 11 1 -10 ## 8 2013 11 1 -6 ## 9 2013 11 1 -6 ## 10 2013 11 1 -6 ## # ℹ 55,393 more rows #%&gt;% # summarise(atraso = mean(atraso_salida, na.rm = TRUE)) &amp; el “y” names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos %&gt;% select(anio, mes, dia, atraso_salida, aerolinea) %&gt;% filter(mes == 12 &amp; dia == 25 &amp; aerolinea==&quot;AA&quot;) ## # A tibble: 78 × 5 ## anio mes dia atraso_salida aerolinea ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 2013 12 25 2 AA ## 2 2013 12 25 -4 AA ## 3 2013 12 25 1 AA ## 4 2013 12 25 0 AA ## 5 2013 12 25 -3 AA ## 6 2013 12 25 -2 AA ## 7 2013 12 25 26 AA ## 8 2013 12 25 -7 AA ## 9 2013 12 25 -6 AA ## 10 2013 12 25 21 AA ## # ℹ 68 more rows !, el “no”, excluye vuelos %&gt;% select(anio, mes, dia, atraso_salida) %&gt;% filter(mes == 11 &amp; !dia %in% c(1:10)) %&gt;% group_by(dia) %&gt;% summarise(atraso = mean(atraso_salida, na.rm = TRUE)) ## # A tibble: 20 × 2 ## dia atraso ## &lt;int&gt; &lt;dbl&gt; ## 1 11 3.34 ## 2 12 8.55 ## 3 13 2.60 ## 4 14 2.16 ## 5 15 0.587 ## 6 16 1.70 ## 7 17 21.9 ## 8 18 5.59 ## 9 19 0.439 ## 10 20 1.78 ## 11 21 3.11 ## 12 22 11.0 ## 13 23 3.49 ## 14 24 14.7 ## 15 25 3.32 ## 16 26 7.97 ## 17 27 16.7 ## 18 28 6.06 ## 19 29 0.145 ## 20 30 2.79 Ejercicios: Hacer los ejercicios en la sección 5.2.4 del libro en español 5.2.4 Ejercicios - Encuentra todos los vuelos que: Tuvieron un retraso de llegada de dos o más horas #names(vuelos) vuelos %&gt;% filter(atraso_llegada &gt;=120) ## # A tibble: 10,200 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 811 630 101 ## 2 2013 1 1 848 1835 853 ## 3 2013 1 1 957 733 144 ## 4 2013 1 1 1114 900 134 ## 5 2013 1 1 1505 1310 115 ## 6 2013 1 1 1525 1340 105 ## 7 2013 1 1 1549 1445 64 ## 8 2013 1 1 1558 1359 119 ## 9 2013 1 1 1732 1630 62 ## 10 2013 1 1 1803 1620 103 ## # ℹ 10,190 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; Volaron a Houston (IAH o HOU) Cual son estos aeropuertos, Hou == Houston, IAH == George Bush, Texas vuelos %&gt;% filter(destino %in% c(&quot;IAH&quot;, &quot;HOU&quot;)) ## # A tibble: 9,313 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 623 627 -4 ## 4 2013 1 1 728 732 -4 ## 5 2013 1 1 739 739 0 ## 6 2013 1 1 908 908 0 ## 7 2013 1 1 1028 1026 2 ## 8 2013 1 1 1044 1045 -1 ## 9 2013 1 1 1114 900 134 ## 10 2013 1 1 1205 1200 5 ## # ℹ 9,303 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; vuelos %&gt;% select(anio, mes, dia, destino, aerolinea, atraso_llegada) %&gt;% filter(destino %in% c(&quot;IAH&quot;, &quot;HOU&quot;)) ## # A tibble: 9,313 × 6 ## anio mes dia destino aerolinea atraso_llegada ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2013 1 1 IAH UA 11 ## 2 2013 1 1 IAH UA 20 ## 3 2013 1 1 IAH UA 1 ## 4 2013 1 1 IAH UA 3 ## 5 2013 1 1 IAH UA 26 ## 6 2013 1 1 IAH UA 9 ## 7 2013 1 1 IAH UA 11 ## 8 2013 1 1 IAH UA 1 ## 9 2013 1 1 IAH UA 145 ## 10 2013 1 1 IAH UA -2 ## # ℹ 9,303 more rows Fueron operados por United, American o Delta unique(vuelos$aerolinea) ## [1] &quot;UA&quot; &quot;AA&quot; &quot;B6&quot; &quot;DL&quot; &quot;EV&quot; &quot;MQ&quot; &quot;US&quot; &quot;WN&quot; &quot;VX&quot; &quot;FL&quot; &quot;AS&quot; &quot;9E&quot; &quot;F9&quot; &quot;HA&quot; &quot;YV&quot; ## [16] &quot;OO&quot; vuelos %&gt;% filter(aerolinea %in% c(&quot;UA&quot;, &quot;AA&quot;,&quot;DL&quot;)) ## # A tibble: 139,504 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 554 600 -6 ## 5 2013 1 1 554 558 -4 ## 6 2013 1 1 558 600 -2 ## 7 2013 1 1 558 600 -2 ## 8 2013 1 1 558 600 -2 ## 9 2013 1 1 559 600 -1 ## 10 2013 1 1 559 600 -1 ## # ℹ 139,494 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; Partieron en invierno del hemisferio sur (julio, agosto y septiembre) vuelos %&gt;% filter(mes %in% c(6:8)) ## # A tibble: 86,995 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 6 1 2 2359 3 ## 2 2013 6 1 451 500 -9 ## 3 2013 6 1 506 515 -9 ## 4 2013 6 1 534 545 -11 ## 5 2013 6 1 538 545 -7 ## 6 2013 6 1 539 540 -1 ## 7 2013 6 1 546 600 -14 ## 8 2013 6 1 551 600 -9 ## 9 2013 6 1 552 600 -8 ## 10 2013 6 1 553 600 -7 ## # ℹ 86,985 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; vuelos %&gt;% filter(mes %in% c(7, 8, 9)) ## # A tibble: 86,326 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 7 1 1 2029 212 ## 2 2013 7 1 2 2359 3 ## 3 2013 7 1 29 2245 104 ## 4 2013 7 1 43 2130 193 ## 5 2013 7 1 44 2150 174 ## 6 2013 7 1 46 2051 235 ## 7 2013 7 1 48 2001 287 ## 8 2013 7 1 58 2155 183 ## 9 2013 7 1 100 2146 194 ## 10 2013 7 1 100 2245 135 ## # ℹ 86,316 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; Llegaron más de dos horas tarde, pero no salieron tarde names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos %&gt;% filter(atraso_llegada&gt;120 |atraso_salida &lt;0) ## # A tibble: 193,583 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 544 545 -1 ## 2 2013 1 1 554 600 -6 ## 3 2013 1 1 554 558 -4 ## 4 2013 1 1 555 600 -5 ## 5 2013 1 1 557 600 -3 ## 6 2013 1 1 557 600 -3 ## 7 2013 1 1 558 600 -2 ## 8 2013 1 1 558 600 -2 ## 9 2013 1 1 558 600 -2 ## 10 2013 1 1 558 600 -2 ## # ℹ 193,573 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; vuelos %&gt;% select(atraso_llegada, atraso_salida) %&gt;% filter(atraso_llegada &gt;= 120 &amp; atraso_salida &lt;= 0) ## # A tibble: 29 × 2 ## atraso_llegada atraso_salida ## &lt;dbl&gt; &lt;dbl&gt; ## 1 124 -1 ## 2 130 0 ## 3 124 -2 ## 4 122 -3 ## 5 194 -2 ## 6 140 -3 ## 7 124 -5 ## 8 179 -2 ## 9 143 -5 ## 10 127 -3 ## # ℹ 19 more rows Se retrasaron por lo menos una hora, pero repusieron más de 30 minutos en vuelo vuelos ## # A tibble: 336,776 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # ℹ 336,766 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; ?vuelos #select(atraso_salida, atraso_llegada ) %&gt;% #filter(atraso_salida &gt;= 60 &amp; atraso_llegada &lt;= 30) Partieron entre la medianoche y las 6a.m. (incluyente) # 360 minutos names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos %&gt;% select(horario_salida) %&gt;% filter(horario_salida &lt;=600) ## # A tibble: 9,344 × 1 ## horario_salida ## &lt;int&gt; ## 1 517 ## 2 533 ## 3 542 ## 4 544 ## 5 554 ## 6 554 ## 7 555 ## 8 557 ## 9 557 ## 10 558 ## # ℹ 9,334 more rows Otra función de dplyr que es útil para usar filtros es between(). ¿Qué hace? ¿Puedes usarla para simplificar el código necesario para responder a los desafíos anteriores? vuelos %&gt;% select(horario_salida) %&gt;% filter(between(horario_salida,00, 360)) ## # A tibble: 1,179 × 1 ## horario_salida ## &lt;int&gt; ## 1 42 ## 2 126 ## 3 32 ## 4 50 ## 5 235 ## 6 25 ## 7 106 ## 8 14 ## 9 37 ## 10 16 ## # ℹ 1,169 more rows vuelos %&gt;% select(horario_salida) %&gt;% filter(between(horario_salida, 00, 360)) ## # A tibble: 1,179 × 1 ## horario_salida ## &lt;int&gt; ## 1 42 ## 2 126 ## 3 32 ## 4 50 ## 5 235 ## 6 25 ## 7 106 ## 8 14 ## 9 37 ## 10 16 ## # ℹ 1,169 more rows ¿Cuántos vuelos tienen datos faltantes en horario_salida? ¿Qué otras variables tienen valores faltantes? ¿Qué representan estas filas? vuelos %&gt;% select(horario_salida) %&gt;% is.na() %&gt;% table() ## . ## FALSE TRUE ## 328521 8255 #vuelos %&gt;% #select(horario_salida) %&gt;% # table() library(tidyverse) 2^2 ## [1] 4 1^2 ## [1] 1 1^0 ## [1] 1 NA^0 ## [1] 1 #NA==1 NA|TRUE ## [1] TRUE FALSE &amp; NA ## [1] FALSE NA * 0 ## [1] NA NA * 1 ## [1] NA 12 * 3 ## [1] 36 NA - 3 ## [1] NA Use data from a link on the web *** filter for Puerto Rico only COVID_PR library(data.table) ## ## Attaching package: &#39;data.table&#39; ## The following objects are masked from &#39;package:lubridate&#39;: ## ## hour, isoweek, mday, minute, month, quarter, second, wday, week, ## yday, year ## The following objects are masked from &#39;package:dplyr&#39;: ## ## between, first, last ## The following object is masked from &#39;package:purrr&#39;: ## ## transpose #url_COVID_PR=fread(&quot;https://raw.githubusercontent.com/rafalab/pr-covid/master/dashboard/data/DatosMortalidad.csv&quot;) #write_csv(url_COVID_PR, &quot;url_COVID_PR.csv&quot;) library(readr) url_COVID_PR &lt;- read_csv(&quot;Datos/url_COVID_PR.csv&quot;) ## New names: ## • `` -&gt; `...1` ## Rows: 587 Columns: 18 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): Fecha ## dbl (17): ...1, Muertes, IncrementoMuertes, CasosPCR_Salud, IncCasosPCR_Salu... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. url_COVID=url_COVID_PR names(url_COVID) ## [1] &quot;...1&quot; &quot;Fecha&quot; &quot;Muertes&quot; ## [4] &quot;IncrementoMuertes&quot; &quot;CasosPCR_Salud&quot; &quot;IncCasosPCR_Salud&quot; ## [7] &quot;CasosSaludNuevo&quot; &quot;IncCasosSaludNuevo&quot; &quot;HospitCOV19&quot; ## [10] &quot;CamasICU&quot; &quot;CamasICU_disp&quot; &quot;Ventiladores&quot; ## [13] &quot;MuertesSalud&quot; &quot;IncMueSalud&quot; &quot;VacDoses&quot; ## [16] &quot;VacAdm&quot; &quot;N1MoreDoses&quot; &quot;N2Doses&quot; head(url_COVID) ## # A tibble: 6 × 18 ## ...1 Fecha Muertes IncrementoMuertes CasosPCR_Salud IncCasosPCR_Salud ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 3/12/20 0 0 NA NA ## 2 2 3/13/20 0 0 NA NA ## 3 3 3/14/20 0 0 NA NA ## 4 4 3/15/20 0 0 NA NA ## 5 5 3/16/20 0 0 NA NA ## 6 6 3/17/20 0 0 NA NA ## # ℹ 12 more variables: CasosSaludNuevo &lt;dbl&gt;, IncCasosSaludNuevo &lt;dbl&gt;, ## # HospitCOV19 &lt;dbl&gt;, CamasICU &lt;dbl&gt;, CamasICU_disp &lt;dbl&gt;, Ventiladores &lt;dbl&gt;, ## # MuertesSalud &lt;dbl&gt;, IncMueSalud &lt;dbl&gt;, VacDoses &lt;dbl&gt;, VacAdm &lt;dbl&gt;, ## # N1MoreDoses &lt;dbl&gt;, N2Doses &lt;dbl&gt; tail(url_COVID) ## # A tibble: 6 × 18 ## ...1 Fecha Muertes IncrementoMuertes CasosPCR_Salud IncCasosPCR_Salud ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 582 10/14/21 3205 4 150812 181 ## 2 583 10/15/21 3207 2 150892 80 ## 3 584 10/16/21 3207 0 150969 77 ## 4 585 10/17/21 3207 0 151027 58 ## 5 586 10/18/21 3209 2 151033 6 ## 6 587 10/19/21 3213 4 151089 56 ## # ℹ 12 more variables: CasosSaludNuevo &lt;dbl&gt;, IncCasosSaludNuevo &lt;dbl&gt;, ## # HospitCOV19 &lt;dbl&gt;, CamasICU &lt;dbl&gt;, CamasICU_disp &lt;dbl&gt;, Ventiladores &lt;dbl&gt;, ## # MuertesSalud &lt;dbl&gt;, IncMueSalud &lt;dbl&gt;, VacDoses &lt;dbl&gt;, VacAdm &lt;dbl&gt;, ## # N1MoreDoses &lt;dbl&gt;, N2Doses &lt;dbl&gt; url_COVID %&gt;% select(IncrementoMuertes) %&gt;% summarise(Prom_muerte_dia = mean(IncrementoMuertes, na.rm = TRUE), maximo_muerte_dia = max(IncrementoMuertes, na.rm = TRUE)) ## # A tibble: 1 × 2 ## Prom_muerte_dia maximo_muerte_dia ## &lt;dbl&gt; &lt;dbl&gt; ## 1 5.47 29 arrange() vuelos %&gt;% select(horario_salida) %&gt;% arrange() ## # A tibble: 336,776 × 1 ## horario_salida ## &lt;int&gt; ## 1 517 ## 2 533 ## 3 542 ## 4 544 ## 5 554 ## 6 554 ## 7 555 ## 8 557 ## 9 557 ## 10 558 ## # ℹ 336,766 more rows vuelos %&gt;% arrange(desc(horario_salida)) ## # A tibble: 336,776 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 10 30 2400 2359 1 ## 2 2013 11 27 2400 2359 1 ## 3 2013 12 5 2400 2359 1 ## 4 2013 12 9 2400 2359 1 ## 5 2013 12 9 2400 2250 70 ## 6 2013 12 13 2400 2359 1 ## 7 2013 12 19 2400 2359 1 ## 8 2013 12 29 2400 1700 420 ## 9 2013 2 7 2400 2359 1 ## 10 2013 2 7 2400 2359 1 ## # ℹ 336,766 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.3.1 Ejercicios Ordena vuelos para encontrar los vuelos más retrasados en salida. ?vuelos vuelos %&gt;% select(atraso_llegada, horario_salida) %&gt;% arrange(atraso_llegada, desc(horario_salida)) ## # A tibble: 336,776 × 2 ## atraso_llegada horario_salida ## &lt;dbl&gt; &lt;int&gt; ## 1 -86 1715 ## 2 -79 719 ## 3 -75 1947 ## 4 -75 1826 ## 5 -74 1816 ## 6 -73 1926 ## 7 -71 2054 ## 8 -71 1753 ## 9 -71 657 ## 10 -70 1801 ## # ℹ 336,766 more rows Encuentra los vuelos que salieron más temprano. vuelos %&gt;% select(horario_salida) %&gt;% filter(horario_salida &gt;= 600) %&gt;% filter(horario_salida &gt; 2400) ## # A tibble: 0 × 1 ## # ℹ 1 variable: horario_salida &lt;int&gt; names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos %&gt;% select(atraso_salida) %&gt;% arrange(atraso_salida) ## # A tibble: 336,776 × 1 ## atraso_salida ## &lt;dbl&gt; ## 1 -43 ## 2 -33 ## 3 -32 ## 4 -30 ## 5 -27 ## 6 -26 ## 7 -25 ## 8 -25 ## 9 -24 ## 10 -24 ## # ℹ 336,766 more rows Ordena vuelos para encontrar los vuelos más rápidos (que viajaron a mayor velocidad). vuelos %&gt;% mutate(velocidad=distancia/tiempo_vuelo) %&gt;% arrange(desc(velocidad)) ## # A tibble: 336,776 × 20 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 5 25 1709 1700 9 ## 2 2013 7 2 1558 1513 45 ## 3 2013 5 13 2040 2025 15 ## 4 2013 3 23 1914 1910 4 ## 5 2013 1 12 1559 1600 -1 ## 6 2013 11 17 650 655 -5 ## 7 2013 2 21 2355 2358 -3 ## 8 2013 11 17 759 800 -1 ## 9 2013 11 16 2003 1925 38 ## 10 2013 11 16 2349 2359 -10 ## # ℹ 336,766 more rows ## # ℹ 14 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt;, velocidad &lt;dbl&gt; ¿Cuáles vuelos viajaron más lejos? vuelos %&gt;% arrange(desc(distancia)) ## # A tibble: 336,776 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 857 900 -3 ## 2 2013 1 2 909 900 9 ## 3 2013 1 3 914 900 14 ## 4 2013 1 4 900 900 0 ## 5 2013 1 5 858 900 -2 ## 6 2013 1 6 1019 900 79 ## 7 2013 1 7 1042 900 102 ## 8 2013 1 8 901 900 1 ## 9 2013 1 9 641 900 1301 ## 10 2013 1 10 859 900 -1 ## # ℹ 336,766 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; ¿Cuál viajó más cerca? vuelos %&gt;% arrange(distancia) ## # A tibble: 336,776 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 7 27 NA 106 NA ## 2 2013 1 3 2127 2129 -2 ## 3 2013 1 4 1240 1200 40 ## 4 2013 1 4 1829 1615 134 ## 5 2013 1 4 2128 2129 -1 ## 6 2013 1 5 1155 1200 -5 ## 7 2013 1 6 2125 2129 -4 ## 8 2013 1 7 2124 2129 -5 ## 9 2013 1 8 2127 2130 -3 ## 10 2013 1 9 2126 2129 -3 ## # ℹ 336,766 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; Otra función desc() Ejercicios: Hacer los ejercicios en la sección 5.3.1 del libro en español Otras funciones: starts_with() ends_with() contains() matches(“(.)\\1”) # paquete STRING rename() everything() 5.2 starts_with(), ends_with() Es una función para seleccionar basado names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos %&gt;% select(horario_salida) ## # A tibble: 336,776 × 1 ## horario_salida ## &lt;int&gt; ## 1 517 ## 2 533 ## 3 542 ## 4 544 ## 5 554 ## 6 554 ## 7 555 ## 8 557 ## 9 557 ## 10 558 ## # ℹ 336,766 more rows vuelos %&gt;% select(starts_with(&quot;horario&quot;)) ## # A tibble: 336,776 × 2 ## horario_salida horario_llegada ## &lt;int&gt; &lt;int&gt; ## 1 517 830 ## 2 533 850 ## 3 542 923 ## 4 544 1004 ## 5 554 812 ## 6 554 740 ## 7 555 913 ## 8 557 709 ## 9 557 838 ## 10 558 753 ## # ℹ 336,766 more rows vuelos %&gt;% select(ends_with(&quot;salida&quot;)) ## # A tibble: 336,776 × 2 ## horario_salida atraso_salida ## &lt;int&gt; &lt;dbl&gt; ## 1 517 2 ## 2 533 4 ## 3 542 2 ## 4 544 -1 ## 5 554 -6 ## 6 554 -4 ## 7 555 -5 ## 8 557 -3 ## 9 557 -3 ## 10 558 -2 ## # ℹ 336,766 more rows vuelos %&gt;% select(contains(&quot;hora&quot;)) ## # A tibble: 336,776 × 4 ## horario_salida horario_llegada hora fecha_hora ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dttm&gt; ## 1 517 830 5 2013-01-01 05:00:00 ## 2 533 850 5 2013-01-01 05:00:00 ## 3 542 923 5 2013-01-01 05:00:00 ## 4 544 1004 5 2013-01-01 05:00:00 ## 5 554 812 6 2013-01-01 06:00:00 ## 6 554 740 5 2013-01-01 05:00:00 ## 7 555 913 6 2013-01-01 06:00:00 ## 8 557 709 6 2013-01-01 06:00:00 ## 9 557 838 6 2013-01-01 06:00:00 ## 10 558 753 6 2013-01-01 06:00:00 ## # ℹ 336,766 more rows 5.3 rename() Cambiar el nombre de la columna vuelos %&gt;% rename(aeropuerto_origen=origen) %&gt;% rename(areop_distino=destino)# nombre nuevo= nombre original ## # A tibble: 336,776 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # ℹ 336,766 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # aeropuerto_origen &lt;chr&gt;, areop_distino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, ## # distancia &lt;dbl&gt;, hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.4 Reoganizar el oden de las columnas head(vuelos) ## # A tibble: 6 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; vuelos %&gt;% select(distancia, aerolinea, everything()) ## # A tibble: 336,776 × 19 ## distancia aerolinea anio mes dia horario_salida salida_programada ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1400 UA 2013 1 1 517 515 ## 2 1416 UA 2013 1 1 533 529 ## 3 1089 AA 2013 1 1 542 540 ## 4 1576 B6 2013 1 1 544 545 ## 5 762 DL 2013 1 1 554 600 ## 6 719 UA 2013 1 1 554 558 ## 7 1065 B6 2013 1 1 555 600 ## 8 229 EV 2013 1 1 557 600 ## 9 944 B6 2013 1 1 557 600 ## 10 733 AA 2013 1 1 558 600 ## # ℹ 336,766 more rows ## # ℹ 12 more variables: atraso_salida &lt;dbl&gt;, horario_llegada &lt;int&gt;, ## # llegada_programada &lt;int&gt;, atraso_llegada &lt;dbl&gt;, vuelo &lt;int&gt;, ## # codigo_cola &lt;chr&gt;, origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; 5.5 matches(“(.)\\1”) Lo veremos en la leccion de “STRING” Ejercicios: Hacer los ejercicios en la sección 5.4.1 del libro en español Otras funciones: mutate() library(nycflights13) head(flights) ## # A tibble: 6 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## # ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, ## # hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; library(tidyverse) flights_sml &lt;- select(flights, year:day, ends_with(&quot;delay&quot;), distance, air_time ) head(flights_sml) ## # A tibble: 6 × 7 ## year month day dep_delay arr_delay distance air_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 1400 227 ## 2 2013 1 1 4 20 1416 227 ## 3 2013 1 1 2 33 1089 160 ## 4 2013 1 1 -1 -18 1576 183 ## 5 2013 1 1 -6 -25 762 116 ## 6 2013 1 1 -4 12 719 150 mutate(flights_sml, gain = dep_delay - arr_delay, speed = distance / air_time * 60 ) ## # A tibble: 336,776 × 9 ## year month day dep_delay arr_delay distance air_time gain speed ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 1400 227 -9 370. ## 2 2013 1 1 4 20 1416 227 -16 374. ## 3 2013 1 1 2 33 1089 160 -31 408. ## 4 2013 1 1 -1 -18 1576 183 17 517. ## 5 2013 1 1 -6 -25 762 116 19 394. ## 6 2013 1 1 -4 12 719 150 -16 288. ## 7 2013 1 1 -5 19 1065 158 -24 404. ## 8 2013 1 1 -3 -14 229 53 11 259. ## 9 2013 1 1 -3 -8 944 140 5 405. ## 10 2013 1 1 -2 8 733 138 -10 319. ## # ℹ 336,766 more rows 5.6 Hagan lo con el data set en espanol names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos_sml &lt;- select(vuelos, anio:dia, starts_with(&quot;atraso&quot;), distancia, tiempo_vuelo ) head(vuelos_sml) ## # A tibble: 6 × 7 ## anio mes dia atraso_salida atraso_llegada distancia tiempo_vuelo ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 1400 227 ## 2 2013 1 1 4 20 1416 227 ## 3 2013 1 1 2 33 1089 160 ## 4 2013 1 1 -1 -18 1576 183 ## 5 2013 1 1 -6 -25 762 116 ## 6 2013 1 1 -4 12 719 150 mutate(vuelos_sml, ganado = atraso_salida - atraso_llegada, velocidad = distancia / tiempo_vuelo * 60 ) ## # A tibble: 336,776 × 9 ## anio mes dia atraso_salida atraso_llegada distancia tiempo_vuelo ganado ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 1400 227 -9 ## 2 2013 1 1 4 20 1416 227 -16 ## 3 2013 1 1 2 33 1089 160 -31 ## 4 2013 1 1 -1 -18 1576 183 17 ## 5 2013 1 1 -6 -25 762 116 19 ## 6 2013 1 1 -4 12 719 150 -16 ## 7 2013 1 1 -5 19 1065 158 -24 ## 8 2013 1 1 -3 -14 229 53 11 ## 9 2013 1 1 -3 -8 944 140 5 ## 10 2013 1 1 -2 8 733 138 -10 ## # ℹ 336,766 more rows ## # ℹ 1 more variable: velocidad &lt;dbl&gt; 5.7 transmute() Para guardar solamente la nueva variable usa transmutate transmute(flights, gain = dep_delay - arr_delay, hours = air_time / 60, gain_per_hour = gain / hours ) ## # A tibble: 336,776 × 3 ## gain hours gain_per_hour ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -9 3.78 -2.38 ## 2 -16 3.78 -4.23 ## 3 -31 2.67 -11.6 ## 4 17 3.05 5.57 ## 5 19 1.93 9.83 ## 6 -16 2.5 -6.4 ## 7 -24 2.63 -9.11 ## 8 11 0.883 12.5 ## 9 5 2.33 2.14 ## 10 -10 2.3 -4.35 ## # ℹ 336,766 more rows Hagan lo con “vuelos” 5.8 lag() Para calcular diferencias entre variables en la misma columna #set.seed(12345) # que los datos sean al azar, siempre sean los mismo, se usa el &quot;set.seed()&quot; para enseñanza. #rnorm() DATOS CON DISTRIBUCION NORMAL rpois(7, 2) ## [1] 2 2 2 1 1 0 4 data=rpois(14, 10) df=as.tibble(data) ## Warning: `as.tibble()` was deprecated in tibble 2.0.0. ## ℹ Please use `as_tibble()` instead. ## ℹ The signature and semantics have changed, see `?as_tibble`. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. df ## # A tibble: 14 × 1 ## value ## &lt;int&gt; ## 1 8 ## 2 8 ## 3 16 ## 4 11 ## 5 7 ## 6 12 ## 7 10 ## 8 5 ## 9 9 ## 10 10 ## 11 9 ## 12 14 ## 13 10 ## 14 9 df %&gt;% select(value) %&gt;% mutate(lag1=lag(value)) %&gt;% mutate(lag3=lag(value, 3)) %&gt;% mutate(lag7=lag(value,7)) ## # A tibble: 14 × 4 ## value lag1 lag3 lag7 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 8 NA NA NA ## 2 8 8 NA NA ## 3 16 8 NA NA ## 4 11 16 8 NA ## 5 7 11 8 NA ## 6 12 7 16 NA ## 7 10 12 11 NA ## 8 5 10 7 8 ## 9 9 5 12 8 ## 10 10 9 10 16 ## 11 9 10 5 11 ## 12 14 9 9 7 ## 13 10 14 10 12 ## 14 9 10 9 10 df%&gt;% select(value) %&gt;% mutate(Change_df=value-lag(value, 7)) # El cambio en los valores entre celdas ## # A tibble: 14 × 2 ## value Change_df ## &lt;int&gt; &lt;int&gt; ## 1 8 NA ## 2 8 NA ## 3 16 NA ## 4 11 NA ## 5 7 NA ## 6 12 NA ## 7 10 NA ## 8 5 -3 ## 9 9 1 ## 10 10 -6 ## 11 9 -2 ## 12 14 7 ## 13 10 -2 ## 14 9 -1 5.9 Usa “Lag” con “IncCasosSaludNuevo” en COVID-19 PR Evalua la diferencia en números de casos entre 7 días de las semana en números de casos nuevos de COVID, “IncCasosSaludNuevo” library(readr) library(dplyr) #names(url_COVID_PR) url_COVID_PR &lt;- read_csv(&quot;Datos/url_COVID_PR.csv&quot;) ## New names: ## Rows: 587 Columns: 18 ## ── Column specification ## ──────────────────────────────────────────────────────── Delimiter: &quot;,&quot; chr ## (1): Fecha dbl (17): ...1, Muertes, IncrementoMuertes, CasosPCR_Salud, ## IncCasosPCR_Salu... ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -&gt; `...1` #head(url_COVID_PR) #names(url_COVID_PR) df2=url_COVID_PR %&gt;% select(IncCasosSaludNuevo) %&gt;% mutate(Cambios_Casos=IncCasosSaludNuevo-lag(IncCasosSaludNuevo,7)) df2 ## # A tibble: 587 × 2 ## IncCasosSaludNuevo Cambios_Casos ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2 NA ## 2 3 NA ## 3 3 NA ## 4 0 NA ## 5 9 NA ## 6 7 NA ## 7 6 NA ## 8 5 3 ## 9 14 11 ## 10 12 9 ## # ℹ 577 more rows df2 %&gt;% select(IncCasosSaludNuevo, Cambios_Casos) %&gt;% colMeans(na.rm=TRUE) ## IncCasosSaludNuevo Cambios_Casos ## 257.8310580 0.4507772 #df2 %&gt;% # select() # slice(na.rm=TRUE) # lets you index rows by their (integer) locations. It allows you to select, remove, and duplicate rows. It is accompanied by a number of helpers for common use cases 5.10 lead(), is the “next” (lead()) values in a vector/column set.seed(12345) data=rpois(15, 10) df=as.tibble(data) df ## # A tibble: 15 × 1 ## value ## &lt;int&gt; ## 1 11 ## 2 12 ## 3 9 ## 4 8 ## 5 11 ## 6 4 ## 7 11 ## 8 7 ## 9 8 ## 10 11 ## 11 9 ## 12 10 ## 13 9 ## 14 11 ## 15 13 df %&gt;% select(value) %&gt;% mutate(lead1=lead(value)) %&gt;% mutate(lead3=lead(value, 3)) ## # A tibble: 15 × 3 ## value lead1 lead3 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 11 12 8 ## 2 12 9 11 ## 3 9 8 4 ## 4 8 11 11 ## 5 11 4 7 ## 6 4 11 8 ## 7 11 7 11 ## 8 7 8 9 ## 9 8 11 10 ## 10 11 9 9 ## 11 9 10 11 ## 12 10 9 13 ## 13 9 11 NA ## 14 11 13 NA ## 15 13 NA NA # Calculate the change in value from one (1) time period and four (4) time periods df%&gt;% select(value) %&gt;% mutate(lead1=value-lead(value)) %&gt;% mutate(lead7=value-lead(value, 7)) ## # A tibble: 15 × 3 ## value lead1 lead7 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 11 -1 4 ## 2 12 3 4 ## 3 9 1 -2 ## 4 8 -3 -1 ## 5 11 7 1 ## 6 4 -7 -5 ## 7 11 4 0 ## 8 7 -1 -6 ## 9 8 -3 NA ## 10 11 2 NA ## 11 9 -1 NA ## 12 10 1 NA ## 13 9 -2 NA ## 14 11 -2 NA ## 15 13 NA NA 5.11 cumsum Cumulative Sum: the values are sum along the vector or column x &lt;- sample(1:15, 10, replace=TRUE) x ## [1] 14 2 4 11 12 9 9 4 8 11 df=as.tibble(x) df ## # A tibble: 10 × 1 ## value ## &lt;int&gt; ## 1 14 ## 2 2 ## 3 4 ## 4 11 ## 5 12 ## 6 9 ## 7 9 ## 8 4 ## 9 8 ## 10 11 df %&gt;% select(value) %&gt;% mutate(suma=cumsum(value)) ## # A tibble: 10 × 2 ## value suma ## &lt;int&gt; &lt;int&gt; ## 1 14 14 ## 2 2 16 ## 3 4 20 ## 4 11 31 ## 5 12 43 ## 6 9 52 ## 7 9 61 ## 8 4 65 ## 9 8 73 ## 10 11 84 url_COVID_PR &lt;- read_csv(&quot;Datos/url_COVID_PR.csv&quot;) ## New names: ## Rows: 587 Columns: 18 ## ── Column specification ## ──────────────────────────────────────────────────────── Delimiter: &quot;,&quot; chr ## (1): Fecha dbl (17): ...1, Muertes, IncrementoMuertes, CasosPCR_Salud, ## IncCasosPCR_Salu... ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -&gt; `...1` head(url_COVID_PR) ## # A tibble: 6 × 18 ## ...1 Fecha Muertes IncrementoMuertes CasosPCR_Salud IncCasosPCR_Salud ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 3/12/20 0 0 NA NA ## 2 2 3/13/20 0 0 NA NA ## 3 3 3/14/20 0 0 NA NA ## 4 4 3/15/20 0 0 NA NA ## 5 5 3/16/20 0 0 NA NA ## 6 6 3/17/20 0 0 NA NA ## # ℹ 12 more variables: CasosSaludNuevo &lt;dbl&gt;, IncCasosSaludNuevo &lt;dbl&gt;, ## # HospitCOV19 &lt;dbl&gt;, CamasICU &lt;dbl&gt;, CamasICU_disp &lt;dbl&gt;, Ventiladores &lt;dbl&gt;, ## # MuertesSalud &lt;dbl&gt;, IncMueSalud &lt;dbl&gt;, VacDoses &lt;dbl&gt;, VacAdm &lt;dbl&gt;, ## # N1MoreDoses &lt;dbl&gt;, N2Doses &lt;dbl&gt; url_COVID_PR %&gt;% select(IncCasosSaludNuevo, CasosSaludNuevo) %&gt;% mutate(suma=cumsum(IncCasosSaludNuevo)) ## # A tibble: 587 × 3 ## IncCasosSaludNuevo CasosSaludNuevo suma ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2 2 2 ## 2 3 5 5 ## 3 3 8 8 ## 4 0 8 8 ## 5 9 17 17 ## 6 7 24 24 ## 7 6 30 30 ## 8 5 35 35 ## 9 14 49 49 ## 10 12 61 61 ## # ℹ 577 more rows 5.12 cummean() and cumvar() The mean of the values are calculated Cummulative mean set.seed(678) x &lt;- sample(1:20, 15) x ## [1] 6 9 14 16 4 12 13 8 10 1 19 11 17 3 7 df=as.tibble(x) df ## # A tibble: 15 × 1 ## value ## &lt;int&gt; ## 1 6 ## 2 9 ## 3 14 ## 4 16 ## 5 4 ## 6 12 ## 7 13 ## 8 8 ## 9 10 ## 10 1 ## 11 19 ## 12 11 ## 13 17 ## 14 3 ## 15 7 mean(df$value) ## [1] 10 library(MASS) ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select df3=df %&gt;% dplyr::select(value) %&gt;% mutate(Prom_cum=cummean(value)) %&gt;% mutate(Var_cum=cumstats::cumvar(value)) # activar el paquete cumstats library(cumstats) ## ## Attaching package: &#39;cumstats&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## cummean df3=df %&gt;% dplyr::select(value) %&gt;% mutate(Prom_cum=cummean(value)) %&gt;% mutate(Var_cum=cumvar(value)) df3 ## # A tibble: 15 × 3 ## value Prom_cum Var_cum ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 6 6 NA ## 2 9 7.5 4.5 ## 3 14 9.67 16.3 ## 4 16 11.2 20.9 ## 5 4 9.8 26.2 ## 6 12 10.2 21.8 ## 7 13 10.6 19.3 ## 8 8 10.2 17.4 ## 9 10 10.2 15.2 ## 10 1 9.3 22.0 ## 11 19 10.2 28.4 ## 12 11 10.2 25.8 ## 13 17 10.8 27.2 ## 14 3 10.2 29.4 ## 15 7 10 28 NO parametricas pruebas (no son basado en distribucion normal) 5.13 min_rank() y # min_rank(desc()) Asignar valores de rangos a los valores originales o de más grande a meas pequeño o vise versa. set.seed(45678) x &lt;- sample(1:50, 10) x ## [1] 22 1 36 46 7 39 34 10 24 30 df=as.tibble(x) df ## # A tibble: 10 × 1 ## value ## &lt;int&gt; ## 1 22 ## 2 1 ## 3 36 ## 4 46 ## 5 7 ## 6 39 ## 7 34 ## 8 10 ## 9 24 ## 10 30 df %&gt;% dplyr::select(value) %&gt;% mutate(rango_minimo=min_rank(value)) %&gt;% mutate(rango_min_desc=min_rank(desc(value)) ) ## # A tibble: 10 × 3 ## value rango_minimo rango_min_desc ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 22 4 7 ## 2 1 1 10 ## 3 36 8 3 ## 4 46 10 1 ## 5 7 2 9 ## 6 39 9 2 ## 7 34 7 4 ## 8 10 3 8 ## 9 24 5 6 ## 10 30 6 5 5.14 row_number() Qué hace esta función? set.seed(45678) x &lt;- c(10,21,22,NA,5,4) x ## [1] 10 21 22 NA 5 4 df=as.tibble(x) df ## # A tibble: 6 × 1 ## value ## &lt;dbl&gt; ## 1 10 ## 2 21 ## 3 22 ## 4 NA ## 5 5 ## 6 4 df %&gt;% dplyr::select(value) %&gt;% mutate(row=row_number(value)) # equivalente a rank, ## # A tibble: 6 × 2 ## value row ## &lt;dbl&gt; &lt;int&gt; ## 1 10 3 ## 2 21 4 ## 3 22 5 ## 4 NA NA ## 5 5 2 ## 6 4 1 5.15 dense_rank() set.seed(45678) x &lt;- c(10,12,12,NA,51,4) x ## [1] 10 12 12 NA 51 4 df=as.tibble(x) df ## # A tibble: 6 × 1 ## value ## &lt;dbl&gt; ## 1 10 ## 2 12 ## 3 12 ## 4 NA ## 5 51 ## 6 4 df %&gt;% dplyr::select(value) %&gt;% mutate(dense=dense_rank(value)) # equivalente a rank, NOTA que los NA son asignado un valor ## # A tibble: 6 × 2 ## value dense ## &lt;dbl&gt; &lt;int&gt; ## 1 10 2 ## 2 12 3 ## 3 12 3 ## 4 NA NA ## 5 51 4 ## 6 4 1 Num_frutos1=c(0,0,0,0,0,1,1,2,4,5,6,1000000) NF1=as.tibble(Num_frutos1) NF1 ## # A tibble: 12 × 1 ## value ## &lt;dbl&gt; ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 1 ## 7 1 ## 8 2 ## 9 4 ## 10 5 ## 11 6 ## 12 1000000 Num_frutos2=c(0,0,0,0,0,1,1,2,4,5,6,10) mean(Num_frutos1) ## [1] 83334.92 mean(Num_frutos2) ## [1] 2.416667 Start here…. 5.16 percent_rank() set.seed(45678) x &lt;- c(1,2,2,NA,5,4) x ## [1] 1 2 2 NA 5 4 df=as.tibble(x) df ## # A tibble: 6 × 1 ## value ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 2 ## 4 NA ## 5 5 ## 6 4 NF1 %&gt;% dplyr::select(value) %&gt;% mutate(porcentaje_rank=percent_rank(value)) # equivalente a rank, Un número entre a 0 y 1 calculado haciendo una re-escala de los valores usando min_rank to [0, 1]. NOTA que el valor más pequeño es reasignado un valor de 0 y el más grande un valor de 1. ## # A tibble: 12 × 2 ## value porcentaje_rank ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0 ## 2 0 0 ## 3 0 0 ## 4 0 0 ## 5 0 0 ## 6 1 0.455 ## 7 1 0.455 ## 8 2 0.636 ## 9 4 0.727 ## 10 5 0.818 ## 11 6 0.909 ## 12 1000000 1 set.seed(45678) x2 &lt;- sample(1:50, 7) x2 ## [1] 22 1 36 46 7 39 34 df2=as.tibble(x2) df2 ## # A tibble: 7 × 1 ## value ## &lt;int&gt; ## 1 22 ## 2 1 ## 3 36 ## 4 46 ## 5 7 ## 6 39 ## 7 34 df2 %&gt;% dplyr::select(value) %&gt;% mutate(porc2=percent_rank(value)) ## # A tibble: 7 × 2 ## value porc2 ## &lt;int&gt; &lt;dbl&gt; ## 1 22 0.333 ## 2 1 0 ## 3 36 0.667 ## 4 46 1 ## 5 7 0.167 ## 6 39 0.833 ## 7 34 0.5 5.17 cume_dist() Es la suma cumulativa de los rangos set.seed(45678) x &lt;- c(1,2,3,NA,5,4, 10, 8) x ## [1] 1 2 3 NA 5 4 10 8 df=as.tibble(x) df ## # A tibble: 8 × 1 ## value ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 NA ## 5 5 ## 6 4 ## 7 10 ## 8 8 df %&gt;% dplyr::select(value) %&gt;% mutate(rangos_cumulativo=cume_dist(value)) ## # A tibble: 8 × 2 ## value rangos_cumulativo ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0.143 ## 2 2 0.286 ## 3 3 0.429 ## 4 NA NA ## 5 5 0.714 ## 6 4 0.571 ## 7 10 1 ## 8 8 0.857 Ejercicios: Hacer los ejercicios en la sección 5.5.2 del libro en español Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento. ¿Cómo quieres manejar los empates? Lee atentamente la documentación de min_rank(). names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos%&gt;% dplyr::select(atraso_salida)%&gt;% arrange(desc(atraso_salida))%&gt;% mutate(mas_atrados=min_rank(desc(atraso_salida))) %&gt;% head(n=10) ## # A tibble: 10 × 2 ## atraso_salida mas_atrados ## &lt;dbl&gt; &lt;int&gt; ## 1 1301 1 ## 2 1137 2 ## 3 1126 3 ## 4 1014 4 ## 5 1005 5 ## 6 960 6 ## 7 911 7 ## 8 899 8 ## 9 898 9 ## 10 896 10 names(vuelos) ## [1] &quot;anio&quot; &quot;mes&quot; &quot;dia&quot; ## [4] &quot;horario_salida&quot; &quot;salida_programada&quot; &quot;atraso_salida&quot; ## [7] &quot;horario_llegada&quot; &quot;llegada_programada&quot; &quot;atraso_llegada&quot; ## [10] &quot;aerolinea&quot; &quot;vuelo&quot; &quot;codigo_cola&quot; ## [13] &quot;origen&quot; &quot;destino&quot; &quot;tiempo_vuelo&quot; ## [16] &quot;distancia&quot; &quot;hora&quot; &quot;minuto&quot; ## [19] &quot;fecha_hora&quot; vuelos %&gt;% arrange(atraso_salida) %&gt;% mutate(rango_minimo=min_rank(atraso_salida)) %&gt;% head(n=10) ## # A tibble: 10 × 20 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 12 7 2040 2123 -43 ## 2 2013 2 3 2022 2055 -33 ## 3 2013 11 10 1408 1440 -32 ## 4 2013 1 11 1900 1930 -30 ## 5 2013 1 29 1703 1730 -27 ## 6 2013 8 9 729 755 -26 ## 7 2013 10 23 1907 1932 -25 ## 8 2013 3 30 2030 2055 -25 ## 9 2013 3 2 1431 1455 -24 ## 10 2013 5 5 934 958 -24 ## # ℹ 14 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt;, rango_minimo &lt;int&gt; 5.18 Resúmenes con summarise() by group using group_by() library(datos) library(nycflights13) summarise(flights, delay = mean(dep_delay, na.rm = TRUE)) ## # A tibble: 1 × 1 ## delay ## &lt;dbl&gt; ## 1 12.6 flights %&gt;% summarise(delay = mean(dep_delay, na.rm = TRUE)) ## # A tibble: 1 × 1 ## delay ## &lt;dbl&gt; ## 1 12.6 by_day &lt;- group_by(flights, year, month, day) summarise(by_day, delay = mean(dep_delay, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the ## `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # ℹ 355 more rows flights %&gt;% group_by(year, month, day) %&gt;% summarise(delay = mean(dep_delay, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the ## `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: year, month [12] ## year month day delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # ℹ 355 more rows 5.19 The worst airline in departure delays flights %&gt;% group_by(carrier) %&gt;% summarise(delay = mean(dep_delay, na.rm = TRUE)) %&gt;% arrange(desc(delay)) ## # A tibble: 16 × 2 ## carrier delay ## &lt;chr&gt; &lt;dbl&gt; ## 1 F9 20.2 ## 2 EV 20.0 ## 3 YV 19.0 ## 4 FL 18.7 ## 5 WN 17.7 ## 6 9E 16.7 ## 7 B6 13.0 ## 8 VX 12.9 ## 9 OO 12.6 ## 10 UA 12.1 ## 11 MQ 10.6 ## 12 DL 9.26 ## 13 AA 8.59 ## 14 AS 5.80 ## 15 HA 4.90 ## 16 US 3.78 by_dest &lt;- group_by(flights, dest) by_dest ## # A tibble: 336,776 × 19 ## # Groups: dest [105] ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## 7 2013 1 1 555 600 -5 913 854 ## 8 2013 1 1 557 600 -3 709 723 ## 9 2013 1 1 557 600 -3 838 846 ## 10 2013 1 1 558 600 -2 753 745 ## # ℹ 336,766 more rows ## # ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, ## # hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; delay &lt;- summarise(by_dest, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm = TRUE)) delay ## # A tibble: 105 × 4 ## dest count dist delay ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABQ 254 1826 4.38 ## 2 ACK 265 199 4.85 ## 3 ALB 439 143 14.4 ## 4 ANC 8 3370 -2.5 ## 5 ATL 17215 757. 11.3 ## 6 AUS 2439 1514. 6.02 ## 7 AVL 275 584. 8.00 ## 8 BDL 443 116 7.05 ## 9 BGR 375 378 8.03 ## 10 BHM 297 866. 16.9 ## # ℹ 95 more rows #&gt; `summarise()` ungrouping output (override with `.groups` argument) delay &lt;- filter(delay, count &gt; 20, dest != &quot;HNL&quot;) # It looks like delays increase with distance up to ~750 miles # and then decrease. Maybe as flights get longer there&#39;s more # ability to make up delays in the air? ggplot(data = delay, aes(x = dist, y = delay)) + geom_point(aes(size = count), alpha = 1/3) + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Start here names(delay) ## [1] &quot;dest&quot; &quot;count&quot; &quot;dist&quot; &quot;delay&quot; head(delay) ## # A tibble: 6 × 4 ## dest count dist delay ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABQ 254 1826 4.38 ## 2 ACK 265 199 4.85 ## 3 ALB 439 143 14.4 ## 4 ATL 17215 757. 11.3 ## 5 AUS 2439 1514. 6.02 ## 6 AVL 275 584. 8.00 ggplot(data = delay, aes(x = dist, y = delay, label=dest)) + geom_point() + geom_smooth(se = FALSE)+ geom_text(size=2,aes(label=dest), hjust=1, vjust=-1) ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; ## Warning: The following aesthetics were dropped during statistical transformation: label ## ℹ This can happen when ggplot fails to infer the correct grouping structure in ## the data. ## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical ## variable into a factor? Ejercicios: Hacer los ejercicios en la sección 5.6.7 del libro en español 5.20 El Pipe %&gt;% “El pipe” 5.21 Otras funciones: NA na.rm=TRUE !is.na() = is not NA, pq al frente tiene “!” no_cancelados &lt;- vuelos %&gt;% filter(!is.na(atraso_salida), !is.na(atraso_llegada)) no_cancelados ## # A tibble: 327,346 × 19 ## anio mes dia horario_salida salida_programada atraso_salida ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # ℹ 327,336 more rows ## # ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;, ## # atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;, ## # origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;, ## # hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt; no_cancelados %&gt;% group_by(anio, mes, dia) %&gt;% summarise(mean = mean(atraso_salida)) ## `summarise()` has grouped output by &#39;anio&#39;, &#39;mes&#39;. You can override using the ## `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: anio, mes [12] ## anio mes dia mean ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.4 ## 2 2013 1 2 13.7 ## 3 2013 1 3 10.9 ## 4 2013 1 4 8.97 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.56 ## 9 2013 1 9 2.30 ## 10 2013 1 10 2.84 ## # ℹ 355 more rows vuelos %&gt;% group_by(anio, mes, dia) %&gt;% summarise(mean = mean(atraso_salida, na.rm=TRUE)) ## `summarise()` has grouped output by &#39;anio&#39;, &#39;mes&#39;. You can override using the ## `.groups` argument. ## # A tibble: 365 × 4 ## # Groups: anio, mes [12] ## anio mes dia mean ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # ℹ 355 more rows #, # max=max(atraso_salida,na.rm = TRUE), # n=n()) 5.22 Otras funciones: Tarea de grupo. Preparar un .rmd con la explicaciones de como utilizar la función mencionado abajo. Debe incluir La definición de la función en palabra y matemática. un script sencillo (con pocos datos) (uno o más ejemplos) para explicar la función un script con los datos de “vuelos” o de “Covid-19 de PR”. a las 2:20pm cada grupo presentará su trabajo. Despues de la clase cada grupo, mejorará su .rmd con los comentarios recibidos. Domingo se subirá el .rmd y el .html en Edmodo (cada estudiante lo subira: tendra el nombre de cada estudiante en el trabajo) El profesor revisará los trabajos y subsiguiente se distribuira los .rmd y html a los estudiantes. IQR() ## G1 mad() ## G2 first() ## G3 last() ## G3 quantile() ## G4 signif() ## G5 min() max() mean() sd() *** Ejercicios: Hacer los ejercicios en la sección 5.7.1 del libro en español Rolling average: https://stackoverflow.com/questions/743812/calculating-moving-average library(tidyverse) library(zoo) ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric some_data = tibble(day = 1:10) some_data ## # A tibble: 10 × 1 ## day ## &lt;int&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## 7 7 ## 8 8 ## 9 9 ## 10 10 # cma = centered moving average # tma = trailing moving average some_data %&gt;% mutate(cma = rollmean(day, k = 3, fill = NA)) %&gt;% mutate(tma = rollmean(day, k = 3, fill = NA, align = &quot;right&quot;)) %&gt;% mutate(lma = rollmean(day, k = 3, fill = NA, align = &quot;left&quot;)) %&gt;% mutate(cmax=rollmax(day, k=30, fill=NA)) ## # A tibble: 10 × 5 ## day cma tma lma cmax ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 1 NA NA 2 NA ## 2 2 2 NA 3 NA ## 3 3 3 2 4 NA ## 4 4 4 3 5 NA ## 5 5 5 4 6 NA ## 6 6 6 5 7 NA ## 7 7 7 6 8 NA ## 8 8 8 7 9 NA ## 9 9 9 8 NA NA ## 10 10 NA 9 NA NA some_data ## # A tibble: 10 × 1 ## day ## &lt;int&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## 7 7 ## 8 8 ## 9 9 ## 10 10 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
