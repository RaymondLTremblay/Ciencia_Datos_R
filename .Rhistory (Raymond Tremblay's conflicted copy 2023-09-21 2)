mutate( ganancia = atraso_salida - atraso_llegada,
velocidad = distancia / tiempo_vuelo * 60)
library(tidyverse)
library(nycflights13)
head(flights)
flights_sml <- flights |>  dplyr::select(
year:day,
ends_with("delay"),
distance,
air_time
)
head(flights_sml)
flights_sml |> mutate(gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
names(vuelos)
vuelos_sml <- dplyr::select(vuelos,
anio:dia,
starts_with("atraso"),
distancia,
tiempo_vuelo
)
head(vuelos_sml)
mutate(vuelos_sml,
ganado = atraso_salida - atraso_llegada,
velocidad = distancia / tiempo_vuelo * 60
)
flights |> transmute(
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
set.seed(12345) # que los datos sean al azar, siempre sean los mismo, se usa el "set.seed()" para enseñanza.
#rnorm()  DATOS CON DISTRIBUCION NORMAL
rpois(7, 2)
data=rpois(14, 10)
df=as_tibble(data)
df
df %>%
dplyr::select(value) %>%
mutate(lag1=lag(value)) %>%
mutate(lag3=lag(value, 3)) %>%
mutate(lag7=lag(value,5))
df%>%
dplyr::select(value) %>%
mutate(Changes=value-lag(value, 1)) # El cambio en los valores entre celdas
library(readr)
library(dplyr)
#names(url_COVID_PR)
url_COVID_PR <- read_csv("Datos/url_COVID_PR.csv")
#head(url_COVID_PR)
#names(url_COVID_PR)
df2=url_COVID_PR %>%
dplyr::select(IncCasosSaludNuevo) %>%
mutate(Cambios_Casos=IncCasosSaludNuevo-lag(IncCasosSaludNuevo,5))
df2
df2 %>%
dplyr::select(IncCasosSaludNuevo, Cambios_Casos) %>%
colMeans(na.rm=TRUE)
#df2 %>%
#  select()
#  slice(na.rm=TRUE) # lets you index rows by their (integer) locations. It allows you to select, remove, and duplicate rows. It is accompanied by a number of helpers for common use cases
set.seed(12345)
data=rpois(15, 10)
df=as.tibble(data)
df
df %>%
dplyr::select(value) %>%
mutate(lead1=lead(value)) %>%
mutate(lead3=lead(value, 3))
# Calculate the change in value from one (1) time period and four (4) time periods
df%>%
dplyr::select(value) %>%
mutate(lead1=value-lead(value)) %>%
mutate(lead7=value-lead(value, 7))
x <- sample(1:15, 10, replace=TRUE)
x
df=as.tibble(x)
df
df %>%
dplyr::select(value) %>%
mutate(suma=cumsum(value))
url_COVID_PR <- read_csv("Datos/url_COVID_PR.csv")
head(url_COVID_PR)
url_COVID_PR %>%
dplyr::select(IncCasosSaludNuevo, CasosSaludNuevo) %>%
mutate(suma=cumsum(IncCasosSaludNuevo))
#set.seed(678)
x <- rnorm(1000, 5, .2)
head(x)
df=as.tibble(x)
head(df)
mean(df$value)
library(MASS)
df3=df %>%
dplyr::select(value) %>%
mutate(Prom_cum=cummean(value)) %>%
mutate(Var_cum=cumstats::cumvar(value)) # activa el paquete cumstats
library(cumstats)
df3=df %>%
dplyr::select(value) %>%
mutate(Prom_cum=cummean(value)) %>%
mutate(Var_cum=cumvar(value))
df3
df3$order=c(1:10000)
df3$order=c(1:1000)
df3
ggplot(df3, aes(order, Var_cum))+
geom_point()+
geom_smooth()
datos_NA=c(1:10, NA, 11:20)
datos_NA=as_data_frame(datos_NA)
datos_NA
datos_NA=c(1:10, NA, 11:20)
datos_NA=as_data_frame(datos_NA)
datos_NA
datos_NA %>%
dplyr::select(value) %>%
mutate(Prom_cum=cummean(value)) %>%
mutate(Var_cum=cumstats::cumvar(value))
datos_NA=c(1:8, NA, 10:20)
datos_NA=as_data_frame(datos_NA)
datos_NA %>%
dplyr::select(value) %>%
mutate(Prom_cum=cummean(value)) %>%
mutate(Var_cum=cumstats::cumvar(value))
# Solución
datos_NA %>%
dplyr::select(value) %>%
mutate(Prom_cum=cummean(replace_na(value, 0))) %>%
mutate(Var_cum=cumstats::cumvar(replace_na(value, 0)))
datos_NA %>%
dplyr::select(value) %>%
mutate(Prom_cum=cummean(value)) %>%
mutate(Var_cum=cumstats::cumvar(value))
datos_NA %>%
dplyr::select(value) %>%
mutate(Prom_cum=cummean(replace_na(value, 0))) %>%
mutate(Var_cum=cumstats::cumvar(replace_na(value, 0)))
set.seed(45678)
y <- c(10,21,22,NA,5,4)
head(y)
df=as.tibble(y)
df
df %>%
dplyr::select(value) %>%
mutate(row=row_number(value)) # equivalente a rank,
set.seed(45678)
z <- c(10,12,12,NA,51,4)
df=as.tibble(z)
df
df %>%
dplyr::select(value) %>%
mutate(dense=dense_rank(value)) # equivalente a rank, NOTA que los NA no son asignado un valor
set.seed(45678)
w <- c(1,2,2,NA,5,4)
w
df=as.tibble(w)
df
df %>%
dplyr::select(value) %>%
mutate(porcentaje_rank=percent_rank(value)) # equivalente a rank, Un número entre a  0 y 1 calculado haciendo una re-escala de los valores usando min_rank to [0, 1]. NOTA que el valor más pequeño es reasignado un valor de 0 y el más grande un valor de 1.
set.seed(45678)
x2 <- sample(1:50, 7)
df2=as.tibble(x2)
df2
df2 %>%
dplyr::select(value) %>%
mutate(porc2=percent_rank(value))
df %>%
dplyr::select(value) %>%
mutate(porcentaje_rank=percent_rank(value)) # equivalente a rank, Un número entre a  0 y 1 calculado haciendo una re-escala de los valores usando min_rank to [0, 1]. NOTA que el valor más pequeño es reasignado un valor de 0 y el más grande un valor de 1.
w <- c(1,2,2,NA,5,4, 1000)
w
df=as.tibble(w)
df
df %>%
dplyr::select(value) %>%
mutate(porcentaje_rank=percent_rank(value)) # equivalente a rank, Un número entre a  0 y 1 calculado haciendo una re-escala de los valores usando min_rank to [0, 1]. NOTA que el valor más pequeño es reasignado un valor de 0 y el más grande un valor de 1.
w <- c(1,2,2,NA,5,4)
w
df=as.tibble(w)
df %>%
dplyr::select(value) %>%
mutate(porcentaje_rank=percent_rank(value)) # equivalente a rank, Un número entre a  0 y 1 calculado haciendo una re-escala de los valores usando min_rank to [0, 1]. NOTA que el valor más pequeño es reasignado un valor de 0 y el más grande un valor de 1.
set.seed(45678)
x2 <- sample(1:50, 7)
df2=as.tibble(x2)
df2
df2 %>%
dplyr::select(value) %>%
mutate(porc2=percent_rank(value))
set.seed(45678)
x <- c(1,2,3,NA,5,4, 10, 8)
x
df=as.tibble(x)
df
df %>%
dplyr::select(value) %>%
mutate(rangos_cumulativo=cume_dist(value))
install.packages(c("anyflights", "classInt", "credentials", "DescTools", "deSolve", "flextable", "foreign", "ggcorrplot", "ggeffects", "Hmisc", "insight", "knitr", "minqa", "packrat", "performance", "RcppArmadillo", "rgl", "rsconnect", "StanHeaders", "terra"))
library(magrittr)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) %$%
cor(Sepal.Length, Sepal.Width)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) |>
cor(Sepal.Length, Sepal.Width)
data.frame(z = rnorm(100)) %$%
ts.plot(z)
data.frame(z = rnorm(100)) |>
ts.plot(z)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) |>
cor(Sepal.Length, Sepal.Width)
#iris %>%
subset(Sepal.Length > mean(Sepal.Length)) |>
summarize(corr= cor(Sepal.Length, Sepal.Width))
library(tidyverse)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) %$%
cor(Sepal.Length, Sepal.Width)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) |>
summarize(corr= cor(Sepal.Length, Sepal.Width))
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) %$%
cor(Sepal.Length, Sepal.Width)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) |>
summarize(corr= cor(Sepal.Length, Sepal.Width))
data.frame(z = rnorm(100)) %$%
ts.plot(z)
data.frame(z = rnorm(100)) |>
ggplot(aes(z))+
geom_line()
data.frame(z = rnorm(100))
data.frame(z = rnorm(100)) |>
ggplot(aes(z))
data.frame(z = rnorm(100)) |>
ggplot(aes(z))+
geom_line(z)
data.frame(z = rnorm(100)) |>
ggplot(aes(z))+
geom_line()
z
z1=data.frame(z = rnorm(100))
z1|>
ggplot(aes(z))+
geom_line()
z1
z1=data.table(z1)
library(data.table)
z1=data.table(z1)
z1
z1|>
ggplot(aes(z))+
geom_line()
z1$order= c(1:100)
z1
z1|>
ggplot(aes(order, z))+
geom_line()
z
data.frame(z = rnorm(100)) %$%
ts.plot(z)
#Para hacerlo la misma grafico con Tidyverse
z1=data.frame(z = rnorm(100))
library(data.table)
z1=data.table(z1)
z1$order= c(1:100)
z1|>
ggplot(aes(order, z))+
geom_line()
x <- rnorm(100)
x
x %<>% abs %>% sort
x %<>% abs %>% sort
x
x <- rnorm(100)
x
x %<>% abs %>% sort
x
# Example 1
head(iris)
head(iris$Sepal.Length %<>% sqrt)
head(x, 20)
iris
iris |>
filter(two_sp = Species %in% c("setosa"))
iris |>
filter(Species %in% c("setosa"))
iris
iris |>
filter(Species %in% c("setosa", "virginica"))
# Example 1
names(iris)
iris |>
filter(Species %in% c("setosa", "virginica"))
# Example 1
names(iris)
iris |>
filter(Species %in% c("setosa", "virginica"))
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>% # plot usually does not return anything.
colSums
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>% # plot usually does not return anything.
colSums
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot
rnorm(200) %>%
matrix(ncol = 2)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>% # plot usually does not return anything.
colSums
rnorm(200) %>%
matrix(ncol = 2) |>
plot %>% # plot usually does not return anything.
colSums
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%  # plot usually does not return anything.
colSums
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) %$%
cor(Sepal.Length, Sepal.Width)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) |>
summarize(corr= cor(Sepal.Length, Sepal.Width))
data.frame(z = rnorm(100)) %$%
ts.plot(z)
#Para hacerlo la misma grafico con Tidyverse
z1=data.frame(z = rnorm(100))
library(data.table)
z1=data.table(z1)
z1$order= c(1:100)
z1|>
ggplot(aes(order, z))+
geom_line()
x <- rnorm(100)
x %<>% abs %>% sort
x %<>% abs %>% sort
x
x <- rnorm(50)
x %<>% abs %>% sort
# Example 1
head(iris)
head(iris$Sepal.Length %<>% sqrt)
# Example 2
x <- rnorm(100)
head(x, n=10)
x %<>%
abs %>%
sort
head(x, 20)
iris |>
filter(Species %in% c("setosa", "virginica")) |>
head()
rnorm(200) %>%
matrix(ncol = 3)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%  # plot usually does not return anything.
colSums
Sys.Date() # la fecha de hoy
library(tidyverse)
library(datos)
tibble(
secuencia = c(1:8),
edad = c(23,26, 24,26,27, 11,20,21),
nombre = c("Jose", "Maria", "Carol", "Moncho", "Liz", "Maria", "Jorge", "Miguel")
)
tribble(
~secuencia, ~edad, ~nombre,
1, 23, "Jose",
2, 26, "Maria",
3, 23, "Carol"
)
tb = tibble(
a = lubridate::now() + runif(1e2) * 86400,
b = lubridate::today() + runif(1e2) * 30,
c = 1:1e2,
d = runif(1e2),
e = sample(letters, 1e2, replace = TRUE)
)
tb
tb %>%
print(n = 4, width = Inf)
lubridate::now()
lubridate::today()
runif(1e2)
head(vuelos)
vuelos %>%
print(n = 4, width = 2)
class(as.data.frame(tb))
head(vuelos$mes, n=5)
vuelos[["mes"]] |> head(n=40)
#Usar esta función dentro de pipe
vuelos %>% .$mes |> head(n=40)
vuelos %>% .[["mes"]] |> head(n=40)
tb = tibble(
a = lubridate::now() + runif(1e2) * 86400,
b = lubridate::today() + runif(1e2) * 30,
c = 1:1e2,
d = runif(1e2),
e = sample(letters, 1e2, replace = TRUE)
)
tb
tb %>%
print(n = 4, width = Inf)
lubridate::now()
lubridate::today()
runif(1e2)
head(vuelos$mes, n=5)
head(vuelos$mes, n=40)
vuelos[["mes"]] |> head(n=40)
vuelos %>% .$mes |> head(n=40)
vuelos %>% .[["mes"]] |> head(n=40)
vuelos
head(vuelos$salida_programada
<int>
head(vuelos$salida_programada, n=40)
head(vuelos$salida_programada, n=20)
vuelos[["salida_programada"]] |> head(n=20)
#Usar esta función dentro de pipe
vuelos %>% .$salida_programada |> head(n=40)
vuelos %>% .[["salida_programada"]] |> head(n=40)
head(vuelos$salida_programada, n=20)
vuelos[["salida_programada"]] |> head(n=20)
#Usar esta función dentro de pipe
vuelos %>% .$salida_programada |> head(n=20)
vuelos %>% .[["salida_programada"]] |> head(n=20)
library(tinytex)
library(latex2exp)
car_data <-
mtcars %>%
subset(hp > 100) %>%
aggregate(. ~ cyl, data = ., FUN = . %>% mean %>% round(2)) %>%
transform(kpl = mpg %>% multiply_by(0.4251)) %>%
print
car_data <-
transform(aggregate(. ~ cyl,
data = subset(mtcars, hp > 100),
FUN = function(x) round(mean(x), 2)),
kpl = mpg*0.4251)
car_data
Sys.Date()
library(tidyverse)
car_data <-
mtcars %>%
subset(hp > 100) %>%
aggregate(. ~ cyl, data = ., FUN = . %>% mean %>% round(2)) %>%
transform(kpl = mpg %>% multiply_by(0.4251)) %>%
print
car_data <-
transform(aggregate(. ~ cyl,
data = subset(mtcars, hp > 100),
FUN = function(x) round(mean(x), 2)),
kpl = mpg*0.4251)
car_data
library(magrittr)
#iris %>%
#  subset(Sepal.Length > mean(Sepal.Length)) |>
#  cor(Sepal.Length, Sepal.Width)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) %$%
cor(Sepal.Length, Sepal.Width)
iris %>%
subset(Sepal.Length > mean(Sepal.Length)) |>
summarize(corr= cor(Sepal.Length, Sepal.Width))
data.frame(z = rnorm(100)) %$%
ts.plot(z)
#data.frame(z = rnorm(100)) |>
#  ts.plot(z)
#Para hacerlo la misma grafico con Tidyverse
z1=data.frame(z = rnorm(100))
library(data.table)
z1=data.table(z1)
z1$order= c(1:100)
z1|>
ggplot(aes(order, z))+
geom_line()
# Example 1
head(iris)
head(iris$Sepal.Length %<>% sqrt)
# Example 2
x <- rnorm(100)
head(x, n=10)
x %<>%
abs %>%
sort
head(x, 20)
# Example 1
names(iris)
iris |>
filter(Species %in% c("setosa", "virginica")) |>
head()
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%  # plot usually does not return anything.
colSums
